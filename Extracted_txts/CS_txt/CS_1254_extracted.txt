546

 

Let Us C
char vehno[10] ;
int dist;
}
union info
{

struct info1 a;
struct info2 b ;
hi

struct emp

char nf 20];
char grade[ 4 ] ;
int age ;
union info f;

hi

struct employee e ;
The volatile Qualifier

When we define variables in a function the compiler may optimize
the code that uses the variable. That is, the compiler may compile
the code in a manner that will run in the most efficient way
possible. The compiler achieves this by using a CPU register to
store the variable’s value rather than storing it in stack.

However, if we declare the variable as volatile, then it serves as a
warning to the compiler that it should not optimize the code
containing this variable. In such a case whenever we use the
variable its value would be loaded from memory into register,
operations would be performed on it and the result would be
written back to the memory location allocated for the variable.

We can declare a volatile variable as:

Volatile int j ;

547
Chapter 15: Miscellaneous Features

er place where we mi want to declare a variable as volatile
t decl: iS

ace wher a)
Another p’ Ly

is when the varia i ithi 1 of the program and.is
<< when the varie ble is not within the contro! ie dl
fikel * get altered from outside the program. For example. he
likely

variable
volatile float temperature ;

igi d to the
Pei ight get modified through the digital thermometer attache
mi
computer.

‘Summary

Ta ta t aration add to
(a) he enumerated data type and the typedef declaration ad

arity of the program. . i
(b) Sea sakes the data type conversions for spec

When the information to be stored can be represented using a
(©) the ati

i ation in a byte. / a
ae anion has an address that can be stored ae i
. fo ¢ fnction. Pointers to functions provide one mo

We can write a function that receives a variable number of
© ¢c in
€

ne ions in multiple
(f) er access to same memory locations in multip

ways.
Exercise
[A] What will be the output of the following programs:

(a) #include <stdio.h>
void maint )

enum status { pass, fail, atkt }; /
enum status stud1, stud2, stud3 ;
stud( = pass ;

530
