536 Let UsC

 

instruction available in C. Thus we are through with the

language elements that were there to learn. We did all this
learning by compiling our programs using a 16-bit compiler like
Turbo C/C++. Now it is time to move on to more serious stuff. To
make a beginning one has to take a very important decision—
should we attempt to build programs that are targeted towards 16-
bit environments like MS-DOS or 32-bit environments like
Windows/Linux. Obviously we should choose the 32-bit platform
because that is what is in commercial use today and would remain
so until 64-bit environment takes over in future. That raises a very
important question—is it futile to learn C programming using 16-
bit compiler like Turbo C/C++? Absolutely not! The typical 32-bit
environment offers so many features that the beginner is likely to
feel lost. Contrasted with this, 16-bit compilers offer a very simple
environment that a novice can master quickly.

S o far we have learnt every single keyword, operator and

Now that the C fundamentals are out of the way and you are
confident about the language features it is time for us to delve into
the modern 32-bit operating environments. In today’s commercial
world 16-bit operating environments like DOS are more or less
dead. More and more software is being created for 32-bit
environments like Windows and Linux. In this chapter we would
explore how C programming is done under Windows. Chapters 20
& 21 are devoted to exploring C under Linux.

Which Windows...

To a common user the differences amongst various versions of
Windows like Windows 95,98, ME, NT, 2000, XP, Server 2003 is
limited to only visual appearances—things like color of the title
bar, shape of the buttons, desktop, task bar, programs menu etc.
But the truth is much farther than that. Architecturally there are
huge differences amongst them. So many are the differences that
Microsoft categorizes the different versions under two major
heads—Consumer Windows and Windows NT Family. Windows
