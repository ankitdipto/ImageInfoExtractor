650

Chapter 24 Single-Source Shortest Paths

Triangle inequality (Lemma 24.10)
For any edge (u,v) € E, we have 5(s,v) < 6(s,u) + w(u,v).

Upper-bound property (Lemma 24.11)
We always have v.d > 4(s, v) for all vertices v € V, and once v.d achieves the
value 5(s, v), it never changes.

No-path property (Corollary 24.12)
If there is no path from s to v, then we always have v.d = 6(s,v) = 00.

Convergence property (Lemma 24.14)
If s ~+ u > visa shortest path in G for some u,v € V, and if u.d = 6(s,u) at
any time prior to relaxing edge (u,v), then v.d = 8(s, v) at all times afterward.

Path-relaxation property (Lemma 24.15)
If p = (vo. Vi... vx) is a shortest path from s = vo to vg, and we relax the
edges of p in the order (Vo, 1), (V1, V2)... , (Vk-1, Ve), then vg.d = S(s, VE).
This property holds regardless of any other relaxation steps that occur, even if
they are intermixed with relaxations of the edges of p.

 

Predecessor-subgraph property (Lemma 24.17)
Once v.d = 6(s,v) for all v € V, the predecessor subgraph is a shortest-paths
tree rooted at s.

Chapter outline

Section 24.1 presents the Bellman-Ford algorithm, which solves the single-source
shortest-paths problem in the general case in which edges can have negative weight.
The Bellman-Ford algorithm is remarkably simple, and it has the further benefit
of detecting whether a negative-weight cycle is reachable from the source. Sec-
tion 24.2 gives a linear-time algorithm for computing shortest paths from a single
source in a directed acyclic graph. Section 24.3 covers Dijkstra’s algorithm, which
has a lower running time than the Bellman-Ford algorithm but requires the edge
weights to be nonnegative. Section 24.4 shows how we can use the Bellman-Ford
algorithm to solve a special case of linear programming. Finally, Section 24.5
proves the properties of shortest paths and relaxation stated above.

We require some conventions for doing arithmetic with infinities. We shall as-
sume that for any real number a 4 —oo, we have ad + 00 = c0 +a = ov. Also, to
make our proofs hold in the presence of negative-weight cycles, we shall assume
that for any real number a 4 00, we have a + (—00) = (—00) +a = —00.

All algorithms in this chapter assume that the directed graph G is stored in the
adjacency-list representation. Additionally, stored with each edge is its weight, so
that as we traverse each adjacency list, we can determine the edge weights in O(1)
time per edge.
