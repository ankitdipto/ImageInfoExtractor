580 Let UsC

 

mankind like nothing else. Otherwise people would have

still been using the character oriented interfaces of MS-DOS
or Unix. In fact the graphical ability of Windows has played a very
important role in its success story. Once you get a hang of how to
draw inside a window it would open up immense possibilities that
you never thought were possible.

S= times immemorial colors and shapes have fascinated

Graphics as of Now

World has progressed much beyond 16 colors and 640 x 480
resolution graphics that Turbo C/C++ compilers offered under
MS-DOS environment. Today we are living in a world of 1024 x
768 resolution offering 16.7 million colors. Graphical menus,
icons, colored cursors, bitmaps, wave files and animations are the
order of the day. So much so that a 16-color graphics program
built using Turbo C working on a poor resolution almost hurts the
eye. Moreover, with the whole lot of Windows API functions to
support graphics activity there is so much that can be achieved in a
graphics program under Windows. I am sure that this chapter will
help you understand and appreciate these new capabilities.

Device Independent Drawing

Windows allow programmers to write programs to display text or
graphics on the screen without concern over the specifics of the
video hardware. A Windows program that works on a VGA
display will work without modification on an SVGA or on a XGA
display that Windows supports.

The key to this ‘device independence’ is Windows’ use of a
‘device context’. We will explore how the device context can be
used for both text and graphics output, and how using the device
context keeps our programs from interfering with each other on the
screen.
