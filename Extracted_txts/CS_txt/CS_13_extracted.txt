24.1 The Bellman-Ford algorithm O51

 

24.1 The Bellman-Ford algorithm

The Bellman-Ford algorithm solves the single-source shortest-paths problem in
the general case in which edge weights may be negative. Given a weighted, di-
rected graph G = (V, E) with source s and weight function w : E — R, the
Bellman-Ford algorithm returns a boolean value indicating whether or not there is
a negative-weight cycle that is reachable from the source. If there is such a cy-
cle, the algorithm indicates that no solution exists. If there is no such cycle, the
algorithm produces the shortest paths and their weights.

The algorithm relaxes edges, progressively decreasing an estimate v.d on the
weight of a shortest path from the source s to each vertex v € V until it achieves
the actual shortest-path weight 5(s,v). The algorithm returns TRUE if and only if
the graph contains no negative-weight cycles that are reachable from the source.

BELLMAN-ForRD(G, w,5)

1 INITIALIZE-SINGLE-SouRCE(G, 5)

2 fori = 1to|G.Vj—1

3 for each edge (u,v) € G.E
RELAX(u, v, w)

for each edge (u,v) € G.E

ifv.d>u.d+wtu,v)

return FALSE

return TRUE

CIA

Figure 24.4 shows the execution of the Bellman-Ford algorithm on a graph
with 5 vertices. After initializing the d and z values of all vertices in line 1,
the algorithm makes |V| — 1 passes over the edges of the graph. Each pass is
one iteration of the for loop of lines 24 and consists of relaxing each edge of the
graph once. Figures 24.4(b)-(e) show the state of the algorithm after each of the
four passes over the edges. After making |V| — 1 passes, lines 5-8 check for a
negative-weight cycle and return the appropriate boolean value. (We'll see a little
later why this check works.)

The Bellman-Ford algorithm runs in time O(VE), since the initialization in
line 1 takes O(V) time, each of the |V| — 1 passes over the edges in lines 24
takes ©(£) time, and the for loop of lines 5-7 takes O(£) time.

To prove the correctness of the Bellman-Ford algorithm, we start by showing that
if there are no negative-weight cycles, the algorithm computes correct shortest-path
weights for all vertices reachable from the source.

  
