Chapter 19: Interaction With Hardware 655

 

int main()
{

printf ( "Process ID = %d", getpid( ) ) ;
}

Here getpid( ) is a library function which returns the process ID
of the calling process. When the execution of the program comes
to an end the process stands terminated. Every time we run the
program a new process is created. Hence the kernel assigns a new
ID to the process each time. This can be verified by executing the
program several times—each time it would produce a different
output.

Parent and Child Processes

As we know, our running program is a process. From this process
we can create another process. There is a parent-child relationship
between the two processes. The way to achieve this is by using a
library function called fork( ). This function splits the running
process into two processes, the existing one is known as parent and
the new process is known as child. Here is a program that
demonstrates this...

# include <sys/types.h>
int main()

printf ("Before Forking\n" ) ;
fork() ;
printf (“After Forking\n" ) ;

}

Here is the output of the program...
Before Forking

After Forking
After Forking
