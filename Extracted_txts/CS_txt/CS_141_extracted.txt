26.5 The relabel-to-front algorithm 755

RELABEL-TO-FRONT(G, 5, t)

1 INITIALIZE-PREFLOW(G, 5)

2 L=G.V—{s,t}, in any order
3 for each vertex u € G.V — {s,t}
4 u.current = u.N.head
5 u = L.head

6 while uw 4 NIL

7 old-height = u.h
8 DISCHARGE (u)

9 if u.h > old-height

0 move u to the front of list L
1 u = U.next

1
1

The relabel-to-front algorithm works as follows. Line | initializes the preflow
and heights to the same values as in the generic push-relabel algorithm. Line 2
initializes the list L to contain all potentially overflowing vertices, in any order.
Lines 3-4 initialize the current pointer of each vertex u to the first vertex in u’s
neighbor list.

As Figure 26.10 illustrates, the while loop of lines 6-11 runs through the list L,
discharging vertices. Line 5 makes it start with the first vertex in the list. Each
time through the loop, line 8 discharges a vertex u. If u was relabeled by the
DISCHARGE procedure, line 10 moves it to the front of list L. We can determine
whether u was relabeled by comparing its height before the discharge operation,
saved into the variable old-height in line 7, with its height afterward, in line 9.
Line 11 makes the next iteration of the while loop use the vertex following u in
list L. If line 10 moved vw to the front of the list, the vertex used in the next iteration
is the one following vu in its new position in the list.

To show that RELABEL-TO-FRONT computes a maximum flow, we shall show
that it is an implementation of the generic push-relabel algorithm. First, ob-
serve that it performs push and relabel operations only when they apply, since
Lemma 26.29 guarantees that DISCHARGE performs them only when they apply.
It remains to show that when RELABEL-TO-FRONT terminates, no basic opera-
tions apply. The remainder of the correctness argument relies on the following
loop invariant:

At each test in line 6 of RELABEL-TO-FRONT, list L is a topological sort
of the vertices in the admissible network Gy; = (V. fn), and no vertex
before w in the list has excess flow.

Initialization: Immediately after INITIALIZE-PREFLOW has been run, s.h = |V|
and v.h = 0 for all v € V — {s}. Since |V| > 2 (because V contains at
