760

Chapter 26 Maximum Flow

queue is empty, the algorithm terminates. Show how to implement this algorithm
to compute a maximum flow in O(V°*) time.

26.5-3

Show that the generic algorithm still works if RELABEL updates u.h by sim-
ply computing u.h = u.h + 1. How would this change affect the analysis of
RELABEL-TO-FRONT?

265-4 *
Show that if we always discharge a highest overflowing vertex, we can make the
push-relabel method run in O(V°) time.

26.5-5

Suppose that at some point in the execution of a push-relabel algorithm, there exists
an integer 0 < k < |V| —1 for which no vertex has v.h = k. Show that all
vertices with v.h > k are on the source side of a minimum cut. If such a k exists,
the gap heuristic updates every vertex v € V — {s} for which v.h > k, to set
v.h = max(v.h, |V| + 1). Show that the resulting attribute / is a height function.
(The gap heuristic is crucial in making implementations of the push-relabel method
perform well in practice.)

 

Problems

26-1 Escape problem
Annxn grid is an undirected graph consisting of n rows and n columns of vertices,
as shown in Figure 26.11. We denote the vertex in the ith row and the jth column
by (i, j). All vertices in a grid have exactly four neighbors, except for the boundary
vertices, which are the points (i, /) for which i = 1,i =n, j = l,orj =n.
Given m < n’ starting points (x1, y1), (v2, y2),---+ (Xm. Ym) in the grid, the
escape problem is to determine whether or not there are m vertex-disjoint paths
from the starting points to any m different points on the boundary. For example,
the grid in Figure 26.1 1(a) has an escape, but the grid in Figure 26.11(b) does not.

a. Consider a flow network in which vertices, as well as edges, have capacities.
That is, the total positive flow entering any given vertex is subject to a capacity
constraint. Show that determining the maximum flow in a network with edge
and vertex capacities can be reduced to an ordinary maximum-flow problem on
a flow network of comparable size.
