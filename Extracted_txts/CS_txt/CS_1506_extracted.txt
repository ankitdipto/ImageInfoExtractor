34 Chapter 2 Computer-System Structures

the device controller transfers an entire block of data directly to or from its
own buffer storage to memory, with no intervention by the CPU. Only one
interrupt is generated per block, rather than the one interrupt per byte (or word)
generated for low-speed devices.

The basic operation of the CPU is the same. A user program, or the
operating system itself, may request data transfer. The operating system finds
a buffer (an empty buffer for input, or a full buffer for output) from a pool of
buffers for the transfer. (A buffer is typically 128 to 4,096 bytes, depending on
the device type.) Next, a portion of the operating system called a device driver
sets the DMA controller registers to use appropriate source and destination
addresses, and transfer length. The DMA controller is then instructed to start
the I/O operation. While the DMA controller is performing the data transfer,
the CPU is free to perform other tasks. Since the memory generally can transfer
only one word at a time, the DMA controller “steals” memory cycles from the
CPU. This cycle stealing can slow down the CPU execution while a DMA transfer
is in progress. The DMA controller interrupts the CPU when the transfer has
been completed.

2.3 = Storage Structure

Computer programs must be in main memory (also called random-access
memory or RAM) to be executed. Main memory is the only large storage
area (millions to billions of bytes) that the processor can access directly. It is
implemented in a semiconductor technology called dynamic random-access
memory (DRAM), which forms an array of memory words. Each word has
its own address. Interaction is achieved through a sequence of load or store
instructions to specific memory addresses. The load instruction moves a word
from main memory to an internal register within the CPU, whereas the store
instruction moves the content of a register to main memory. Aside from explicit
loads and stores, the CPU automatically loads instructions from main memory
for execution.

A typical instruction—execution cycle, as executed on a system with a
von Neumann architecture, will first fetch an instruction from memory and
will store that instruction in the instruction register. The instruction is then
decoded and may cause operands to be fetched from memory and stored in
some internal register. After the instruction on the operands has been executed,
the result may be stored back in memory. Notice that the memory unit sees only
a stream of memory addresses; it does not know how they are generated (by the
instruction counter, indexing, indirection, literal addresses, and so on) or what
they are for (instructions or data). Accordingly, we can ignore how a memory
address is generated by a program. We are interested only in the sequence of
memory addresses generated by the running program.
