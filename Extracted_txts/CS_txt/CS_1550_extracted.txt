3.3 System Calls 71

In addition, the operating system keeps information about all its processes,
and there are system calls to access this information. Generally, there are
also calls to reset the process information (get process attributes and
set process attributes). In Section 4.1.3, we discuss what information is
normally kept.

3.3.5 Communication

There are two common models of communication. In the message-passing
model, information is exchanged through an interprocess-communication facil-
ity provided by the operating system. Before communication can take place, a
connection must be opened. The name of the other communicator must be
known, be it another process on the same CPU, or a process on another com-
puter connected by a communications network. Each computer in a network
has a host name, such as an IP name, by which it is commonly known. Similarly,
each process has a process name, which is translated into an equivalent iden-
tifier by which the operating system can refer to it. The get hostid and get
processid system calls do this translation. These identifiers are then passed
to the general-purpose open and close calls provided by the file system, or
to specific open connection and close connection system calls, depend-
ing on the system’s model of communications. The recipient process usually
must give its permission for communication to take place with an accept
connection call. Most processes that will be receiving connections are special-
purpose daemons—systems programs provided for that purpose. They exe-
cute a wait for connection call and are awakened when a connection is
made. The source of the communication, known as the client, and the receiving
daemon, known as a server, then exchange messages by read message and
write message system calls. The close connection call terminates the
communication.

In the shared-memory model, processes use map memory system calls to
gain access to regions of memory owned by other processes. Recall that,
normally, the operating system tries to prevent one process from accessing
another process’ memory. Shared memory requires that several processes agree
to remove this restriction. They may then exchange information by reading
and writing data in these shared areas. The form of the data and the location
are determined by these processes and are not under the operating system’s
control. The processes are also responsible for ensuring that they are not writing
to the same location simultaneously. Such mechanisms are discussed in Chapter
7. We will also look at a variation of the process model—threads—that shares
memory by default. Threads will be covered in Chapter 5.

Both of these methods are common in operating systems, and some systems
even implement both. Message passing is useful when smaller numbers of data
need to be exchanged, because no conflicts need to be avoided. It is also easier
toimplement than is shared memory for intercomputer communication. Shared
