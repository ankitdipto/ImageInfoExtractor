39 Summary 89

declarations, initializations, and constants, along with conditional compilation,
produce an output object version of the operating system that is tailored to the
system described.

Ata slightly less tailored level, the system description can cause the creation
of tables and the selection of modules from a precompiled library. These
modules are linked together to form the generated operating system. Selection
allows the library to contain the device drivers for all supported 1/O devices,
but only those needed are linked into the operating system. Because the system
is not recompiled, system generation is faster, but the resulting system may be
overly general.

At the other extreme, a system that is completely table driven can be con-
structed. All the code is always part of the system, and selection occurs at
execution time, rather than at compile or link time. System generation involves
simply creating the appropriate tables to describe the system. Most mod-
ern operating systems are constructed in this manner. Solaris performs some
system-configuration discovery at installation time, and some at boot time. A
configuration file can be used by the systems administrator to fine-tune sys-
tem variables, but hardware support is automatically configured by the kernel.
Likewise, Windows 2000 requires no manual configuration on installation or at
boot time. Once the basic questions about disk layout and network configu-
ration are answered, the installation program automatically detects the system
hardware and installs a properly generated operating system.

The major differences among these approaches are the size and generality
of the generated system and the ease of modification as the hardware configu-
ration changes. Consider the cost of modifying the system to support a newly
acquired graphics terminal or another disk drive. Balanced against that cost, of
course, is the frequency (or infrequency) of such changes.

After an operating system is generated, it must be made available for use
by the hardware. But how does the hardware know where the kernel is, or
how to load that kernel? The procedure of starting a computer by loading the
kernel is known as booting the system. Most computer systems have a small
piece of code, stored in ROM, known as the bootstrap program or bootstrap
loader. This code is able to locate the kernel, load it into main memory, and
start its execution. Some computer systems, such as PCs, use a two-step process
in which a simple bootstrap loader fetches a more complex boot program from
disk, which in turn loads the kernel. Booting a system is discussed in Section
14.3.2 and in Appendix A.

3.9 = Summary

Operating systems provide a number of services. At the lowest level, system
calls allow a running program to make requests from the operating system
directly. At a higher level, the command interpreter or shell provides a mech-
