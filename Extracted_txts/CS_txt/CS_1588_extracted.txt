102 Chapter 4 Processes

The long-term scheduler, on the other hand, executes much less frequently.
There may be minutes between the creation of new processes in the system. The
long-term scheduler controls the degree of multiprogrammingâ€”the number
of processes in memory. If the degree of multiprogramming is stable, then the
average rate of process creation must be equal to the average departure rate of
processes leaving the system. Thus, the long-term scheduler may need to be
invoked only when a process leaves the system. Because of the longer interval
between executions, the long-term scheduler can afford to take more time to
select a process for execution.

The long-term scheduler must make a careful selection. In general, most
processes can be described as either I/O bound or CPU bound. An /O-bound
process spends more of its time doing I/O than it spends doing computations.
A CPU-bound process, on the other hand, generates 1/O requests infrequently,
using more of its time doing computation than an I/O-bound process uses.
The long-term scheduler should select a good process mix of I/O-bound and
CPU-bound processes. If all processes are I/O bound, the ready queue will
almost always be empty, and the short-term scheduler will have little to do.
If all processes are CPU bound, the I/O waiting queue will almost always be
empty, devices will go unused, and again the system will be unbalanced. The
system with the best performance will have a combination of CPU-bound and
I/O-bound processes.

On some systems, the long-term scheduler may be absent or minimal. For
example, time-sharing systems such as UNIX often have no long-term scheduler,
but simply put every new process in memory for the short-term scheduler. The
stability of these systems depends either on a physical limitation (such as the
number of available terminals) or on the self-adjusting nature of human users.
If the performance declines to unacceptable levels, some users will simply quit.

Some operating systems, such as time-sharing systems, may introduce an
additional, intermediate level of scheduling. This medium-term scheduler,

partially executed E
swapped-out processes

     

swap in

end

 
 

Figure 4.6 Addition of medium-term scheduling to the queueing diagram.
