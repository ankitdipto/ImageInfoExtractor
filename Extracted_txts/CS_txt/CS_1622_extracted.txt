130 Chapter5 Threads

 

 

  
   
 

data files |

 

 

 

 

 

|| code

 
  

 

    

 

registers registers

 

 

 

 

 

|| registers

thread —> c c c ° + _ thread

 

 

 

 

 

 

 

 

 

 

 

 

 

 

single-threaded multithreaded

Figure 5.1 Single- and multithreaded processes.

threads of control. A web browser might have one thread display images or text
while another thread retrieves data from the network. A word processor may
have a thread for displaying graphics, another thread for reading keystrokes
from the user, and a third thread for performing spelling and grammar checking
in the background.

In certain situations a single application may be required to perform several
similar tasks. For example, a web server accepts client requests for web pages,
images, sound, and so forth. A busy web server may have several (perhaps
hundreds) of clients concurrently accessing it. If the web server ran as a
traditional single-threaded process, it would be able to service only one client
at a time. The amount of time that a client might have to wait for its request to
be serviced could be enormous.

One solution is to have the server run as a single process that accepts
requests. When the server receives a request, it creates a separate process to
service that request. In fact, this process-creation method was in common use
before threads became popular. Process creation is very heavyweight, as was
shown in the previous chapter. If the new process will perform the same tasks as
the existing process, why incur all that overhead? It is generally more efficient
for one process that contains multiple threads to serve the same purpose. This
approach would multithread the web-server process. The server would create a
separate thread that would listen for client requests; when a request was made,
rather than creating another process, it would create another thread to service
the request.
