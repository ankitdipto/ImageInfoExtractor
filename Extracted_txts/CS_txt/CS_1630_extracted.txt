136  Chapter5 Threads

the middle of updating data it is sharing with other threads. This becomes
especially troublesome with asynchronous cancellation. The operating system
will often reclaim system resources from a cancelled thread, but often will not
reclaim all resources. Therefore, cancelling a thread asynchronously may not
free a necessary system-wide resource.

Alternatively, deferred cancellation works by one thread indicating that a
target thread is to be cancelled. However, cancellation will occur only when
the target thread checks to determine if it should be cancelled or not. This
allows a thread to check if it should be cancelled at a point when it can safely
be cancelled. Pthreads refers to such points as cancellation points.

Most operating systems allow a process or thread to be cancelled asyn-
chronously. However, the Pthread API provides deferred cancellation. This
means that an operating system implementing the Pthread API will allow
deferred cancellation.

5.3.3 Signal Handling

A signal is used in UNIX systems to notify a process that a particular event has
occurred. A signal may be received either synchronously or asynchronously,
depending upon the source and the reason for the event being signalled.
Whether a signal is synchronous or asynchronous, all signals follow the same
pattern:

1. A signal is generated by the occurrence of a particular event.
2. A generated signal is delivered to a process.

3. Once delivered, the signal must be handled.

An example of a synchronous signal includes an illegal memory access or
division by zero. In this instance, if a running program performs either of these
actions, a signal is generated. Synchronous signals are delivered to the same
process that performed the operation causing the signal (hence the reason they
are considered synchronous).

When a signal is generated by an event external to a running process, that
process receives the signal asynchronously. Examples of such signals include
terminating a process with specific keystrokes (such as <control><C>) or
having a timer expire. Typically an asynchronous signal is sent to another
process.

Every signal may be handled by one of two possible handlers:

1. A default signal handler
2. A.user-defined signal handler
