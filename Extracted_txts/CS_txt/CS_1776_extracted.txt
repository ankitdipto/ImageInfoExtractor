8.5 Deadlock Avoidance 257

bank never allocates its available cash such that it can no longer satisfy the
needs of all its customers.

When a new process enters the system, it must declare the maximum
number of instances of each resource type that it may need. This number may
not exceed the total number of resources in the system. When a user requests
a set of resources, the system must determine whether the allocation of these
resources will leave the system in a safe state. If it will, the resources are
allocated; otherwise, the process must wait until some other process releases
enough resources.

Several data structures must be maintained to implement the banker’s
algorithm. These data structures encode the state of the resource-allocation
system. Let be the number of processes in the system and m be the number of
resource types. We need the following data structures:

e Available: A vector of length m indicates the number of available resources
of each type. If Available|j] = k, there are k instances of resource type Rj
available.

e Max: Ann x m matrix defines the maximum demand of each process. If
Mazx{i,j] =k, then process P; may request at most k instances of resource type
Rj.

Allocation: Ann x m matrix defines the number of resources of each type

currently allocated to each process. If Allocation[i,j] = k, then process P; is
currently allocated k instances of resource type Rj.

e Need: An n x m matrix indicates the remaining resource need of each
process. If Need[i,j] = k, then process P; may need k more instances of
resource type R; to complete its task. Note that Needfi,j] = Max{i,j] —
Allocation{i,j).

These data structures vary over time in both size and value.

To simplify the presentation of the banker’s algorithm, let us establish some
notation. Let X and Y be vectors of length n. We say that X < Y if and only if
X{i] < Y{i] for all i = 1, 2, ..., n. For example, if X = (1,7,3,2) and Y = (0,3,2,1),
then Y < X.Y < XifY<XandY#X.

We can treat each row in the matrices Allocation and Need as vectors and
refer to them as Allocation; and Need;, respectively. The vector Allocation; speci-
fies the resources currently allocated to process P;; the vector Need; specifies the
additional resources that process P; may still request to complete its task.

8.5.3.1 Safety Algorithm

The algorithm for finding out whether or not a system is in a safe state can be
described as follows:
