274 Chapter9 Memory Management

operands, results may be stored back in memory. The memory unit sees only a
stream of memory addresses; it does not know how they are generated (by the
instruction counter, indexing, indirection, literal addresses, and so on) or what
they are for (instructions or data). Accordingly, we can ignore how a memory
address is generated by a program. We are interested in only the sequence of
memory addresses generated by the running program.

9.1.1 Address Binding

Usually, a program resides on a disk as a binary executable file. The program
must be brought into memory and placed within a process for it to be executed.
Depending on the memory management in use, the process may be moved
between disk and memory during its execution. The collection of processes
on the disk that is waiting to be brought into memory for execution forms the
input queue.

The normal procedure is to select one of the processes in the input queue
and to load that process into memory. As the process is executed, it accesses
instructions and data from memory. Eventually, the process terminates, and its
memory space is declared available.

Most systems allow a user process to reside in any part of the physical mem-
ory. Thus, although the address space of the computer starts at 00000, the first
address of the user process does not need to be 00000. This arrangement affects
the addresses that the user program can use. In most cases, a user program
will go through several steps—some of which may be optional—before being
executed (Figure 9.1). Addresses may be represented in different ways during
these steps. Addresses in the source program are generally symbolic (such as
count). A compiler will typically bind these symbolic addresses to relocatable
addresses (such as “14 bytes from the beginning of this module”). The link-
age editor or loader will in turn bind these relocatable addresses to absolute
addresses (such as 74014). Each binding is a mapping from one address space
to another.

Classically, the binding of instructions and data to memory addresses can
be done at any step along the way:

¢ Compile time: If you know at compile time where the process will reside
in memory, then absolute code can be generated. For example, if you know
a priori that a user process resides starting at location R, then the generated
compiler code will start at that location and extend up from there. If, at
some later time, the starting location changes, then it will be necessary to
recompile this code. The MS-DOS .COM-format programs are absolute code
bound at compile time.

« Load time: If it is not known at compile time where the process will reside
in memory, then the compiler must generate relocatable code. In this case,
