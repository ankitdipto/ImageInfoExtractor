9.1 Background 277

 

 

 

 

 

 

 

 

 

 

 

 

 

relocation

register

14000,
logical physical
address address

CPU. memory
346 14346
MMU

 

 

 

Figure 9.2. Dynamic relocation using a relocation register.

value R). The user generates only logical addresses and thinks that the process
runs in locations 0 to max. The user program supplies logical addresses; these
logical addresses must be mapped to physical addresses before they are used.

The concept of a logical-address space that is bound to a separate physical-
address space is central to proper memory management.

9.1.3 Dynamic Loading

In our discussion so far, the entire program and data of a process must be in
physical memory for the process to execute. The size of a process is limited
to the size of physical memory. To obtain better memory-space utilization, we
can use dynamic loading. With dynamic loading, a routine is not loaded until
it is called. All routines are kept on disk in a relocatable load format. The
main program is loaded into memory and is executed. When a routine needs
to call another routine, the calling routine first checks to see whether the other
routine has been loaded. If not, the relocatable linking loader is called to load
the desired routine into memory and to update the programâ€™s address tables to
teflect this change. Then, control is passed to the newly loaded routine.

The advantage of dynamic loading is that an unused routine is never
loaded. This method is particularly useful when large amounts of code are
needed to handle infrequently occurring cases, such as error routines. In this
case, although the total program size may be large, the portion that is used (and
hence loaded) may be much smaller.

Dynamic loading does not require special support from the operating sys-
fem. It is the responsibility of the users to design their programs to take
