94 Paging 289

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

frame
number
page 0 0
o|1
page 1 i]4 1| page Oo
page 2 213 2
3/7
page 3 page table 3] page 2
wnmory [fee
5
6
7| page3
physical
memory

Figure 9.7 Paging model of logical and physical memory.

 

page number page offset
P d

m—n n

 

 

 

 

where p is an index into the page table and d is the displacement within the
page.

As a concrete (although minuscule) example, consider the memory in
Figure 9.8. Using a page size of 4 bytes and a physical memory of 32 bytes (8
pages), we show how the user’s view of memory can be mapped into physical
memory. Logical address 0 is page 0, offset 0. Indexing into the page table, we
find that page 0 is in frame 5. Thus, logical address 0 maps to physical address
20 (= (5 x 4) + 0). Logical address 3 (page 0, offset 3) maps to physical address
23 (= (5 x 4) + 3). Logical address 4 is page 1, offset 0; according to the page
table, page 1 is mapped to frame 6. Thus, logical address 4 maps to physical
address 24 (= (6 x 4) + 0). Logical address 13 maps to physical address 9.

You may have noticed that paging itself is a form of dynamic relocation.
Every logical address is bound by the paging hardware to some physical
address. Using paging is similar to using a table of base (or relocation) registers,
one for each frame of memory.

When we use a paging scheme, we have no external fragmentation: Any
free frame can be allocated to a process that needs it. However, we may have
some internal fragmentation. Notice that frames are allocated as units. If the
