9.4 Paging 293

however, allow the page table to be very large (for example, 1 million entries).
For these machines, the use of fast registers to implement the page table is
not feasible. Rather, the page table is kept in main memory, and a page-table
base register (PTBR) points to the page table. Changing page tables requires
changing only this one register, substantially reducing context-switch time.

The problem with this approach is the time required to access a user
memory location. If we want to access location i, we must first index into the
page table, using the value in the PTBR offset by the page number for i. This
task requires a memory access. It provides us with the frame number, which
is combined with the page offset to produce the actual address. We can then
access the desired place in memory. With this scheme, two memory accesses are
needed to access a byte (one for the page-table entry, one for the byte). Thus,
memory access is slowed by a factor of 2. This delay would be intolerable under
most circumstances. We might as well resort to swapping!

The standard solution to this problem is to use a special, small, fast-
lookup hardware cache, called translation look-aside buffer (TLB). The TLB
is associative, high-speed memory. Each entry in the TLB consists of two parts:
a key (or tag) and a value. When the associative memory is presented with
an item, it is compared with all keys simultaneously. If the item is found,
the corresponding value field is returned. The search is fast; the hardware,
however, is expensive. Typically, the number of entries in a TLB is small, often
numbering between 64 and 1,024.

The TLB is used with page tables in the following way. The TLB contains
only a few of the page-table entries. When a logical address is generated by
the CPU, its page number is presented to the TLB. If the page number is found,
its frame number is immediately available and is used to access memory. The
whole task may take less than 10 percent longer than it would if an unmapped
memory reference were used.

If the page number is not in the TLB (known as a TLB miss), a memory
reference to the page table must be made. When the frame number is obtained,
we can use it to access memory (Figure 9.10). In addition, we add the page
number and frame number to the TLB, so that they will be found quickly on the
next reference. If the TLB is already full of entries, the operating system must
select one for replacement. Replacement policies range from least recently used
(LRU) to random. Furthermore, some TLBs allow entries to be wired down,
meaning that they cannot be removed from the TLB. Typically, TLB entries for
kernel code are often wired down.

Some TLBs store address-space identifiers (ASIDs) in each entry of the TLB.
An ASID uniquely identifies each process and is used to provide address space
protection for that process. When the TLB attempts to resolve virtual page
numbers, it ensures the ASID for the currently running process matches the ASID
associated with the virtual page. If the ASIDs do not match, they are treated
as a TLB miss. In addition to providing address-space protection, an ASID
allows the TLB to contain entries for several different processes simultaneously.
