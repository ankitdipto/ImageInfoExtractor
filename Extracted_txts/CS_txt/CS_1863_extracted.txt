328  Chapter10 Virtual Memory

Some systems attempt to limit the amount of swap space when binary
files are used. Demand pages for such files are brought directly from the file
system. However, when page replacement is called for, these pages can simply
be overwritten (because they are never modified) and read in from the file
system again if needed. Using this approach, the file system itself serves as the
backing store. However, swap space must still be used for pages not associated
with a file; these pages include the stack and heap for a process. This technique
is used in several systems including Solaris 2. This method appears to be a good
compromise; it is used in BSD UNIX.

10.3 = Process Creation

In Section 10.2, we illustrated how a process is first started using demand
paging. Using this technique, a process can start quickly by merely demand
paging in the page containing the first instruction. However, paging and virtual
memory can also provide for other benefits during process creation. In this
section, we will explore two techniques made available by virtual memory that
enhance performance creating and running processes.

10.3.1 Copy-on-Write

Demand paging is used when reading a file from disk into memory and such
files may include binary executables. However, process creation using the
fork() system call may initially bypass the need for demand paging by using
a technique similar to page sharing (covered in Section 9.4.5). This technique
provides for rapid process creation and minimizes the number of new pages
that must be allocated to the newly created process.

Recall the fork() system call creates a child process as a duplicate of
its parent. Traditionally fork() worked by creating a copy of the parent’s
address space for the child, duplicating the pages belonging to the parent.
However, considering that many child processes invoke the exec () system call
immediately after creation, the copying of the parent’s address space may be
unnecessary. Alternatively, we can use a technique known as copy-on-write.
This works by allowing the parent and child processes to initially share the
same pages. These shared pages are marked as copy-on-write pages, meaning
that if either process writes to a shared page, a copy of the shared page is
created. For example, assume the child process attempts to modify a page
containing portions of the stack; the operating system recognizes this as a copy-
on-write page. The operating system will then create a copy of this page,
mapping it to the address space of the child process. Therefore, the child
process will modify its copied page and not the page belonging to the parent
process. Using the copy-on-write technique, it is obvious that only the pages
that are modified by either process are copied; all non-modified pages may
