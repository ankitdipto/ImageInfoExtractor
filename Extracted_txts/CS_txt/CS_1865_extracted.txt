330  Chapter10 Virtual Memory

mapped in memory may not necessarily be immediate writes to the file on
disk. Some systems may choose to update the physical file when the operating
system periodically checks if the page in memory mapping the file has been
modified. Closing the file results in all the memory-mapped data being written
back to disk and removed from the virtual memory of the process.

Some operating systems provide memory mapping only through a specific
system call and treat all other file 1/0 using the standard system calls. However,
some systems choose to memory map a file regardless of whether a file was
specified as memory mapped or not. Let’s take Solaris 2 as an example. If
a file is specified as memory-mapped (using the mmap() system call), Solaris
2 maps the file into the address space of the process. However, if a file is
opened and accessed using ordinary system calls such as open(), read(), and
write (), Solaris 2 still memory maps the file, however mapping it to the kernel
address space. Regardless how the file is opened, Solaris 2 treats all file I/O as
memory-mapped, allowing file access to take place in memory.

Multiple processes may be allowed to map the same file into the virtual
memory of each, to allow sharing of data. Writes by any of the processes
modify the data in virtual memory and can be seen by all others that map the
same section of the file. Given our knowledge of virtual memory, it should be
clear how the sharing of memory-mapped sections of memory is implemented:
The virtual-memory map of each sharing process points to the same page of
physical memory—the page that holds a copy of the disk block. This memory
sharing is illustrated in Figure 10.5. The memory-mapping system calls can
also support copy-on-write functionality, allowing processes to share a file in
read-only mode, but to have their own copies of any data they modify. So that
access to the shared data is coordinated, the processes involved might use one
of the mechanisms for achieving mutual exclusion described in Chapter 7.

10.4 = Page Replacement

In our presentation so far, the page-fault rate has not been a serious problem,
because each page has faulted at most once, when it is first referenced. This
representation is not strictly accurate. If a process of ten pages actually uses
only one-half of them, then demand paging saves the I/O necessary to load
the five pages that are never used. We could also increase our degree of
multiprogramming by running twice as many processes. Thus, if we had 40
frames, we could run eight processes, rather than the four that could run if each
required 10 frames (five of which were never used).

If we increase our degree of multiprogramming, we are over-allocating
memory. If we run six processes, each of which is ten pages in size, but actually
uses only five pages, we have higher CPU utilization and throughput, with
10 frames to spare. It is possible, however, that each of these processes, fora
particular data set, may suddenly try to use all ten of its pages, resulting in a
