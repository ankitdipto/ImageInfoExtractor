27.2. Multithreaded matrix multiplication 795

after which we add the products from T into C in using the doubly nested parallel
for loops in lines 15-17.

We first analyze the work M,(n) of the P-MATRIX-MULTIPLY-RECURSIVE
procedure, echoing the serial running-time analysis of its progenitor SQUARE-
MATRIX-MULTIPLY-RECURSIVE. In the recursive case, we partition in @(1) time,
perform eight recursive multiplications of n/2 x n/2 matrices, and finish up with
the @(n?) work from adding two n x n matrices. Thus, the recurrence for the
work M, (1) is

My(n) = 8M,(n/2) + O(n?)
@(n?)

by case | of the master theorem. In other words, the work of our multithreaded al-
gorithm is asymptotically the same as the running time of the procedure SQUARE-
MATRIX-MULTIPLY in Section 4.2, with its triply nested loops.

To determine the span M..(n) of P-MATRIX-MULTIPLY-RECURSIVE, we first
observe that the span for partitioning is @(1), which is dominated by the © (lg)
span of the doubly nested parallel for loops in lines 15-17. Because the eight
parallel recursive calls all execute on matrices of the same size, the maximum span
for any recursive call is just the span of any one. Hence, the recurrence for the
span M.,(n) of P-MATRIX-MULTIPLY-RECURSIVE is

Moo(n) = M,.(n/2) + O(lgn) . (27.7)

This recurrence does not fall under any of the cases of the master theorem, but
it does meet the condition of Exercise 4.6-2. By Exercise 4.6-2, therefore, the
solution to recurrence (27.7) is M,.(n) = @(1g? 1).

Now that we know the work and span of P-MATRIX-MULTIPLY-RECURSIVE,
we can compute its parallelism as M,(n)/M,.(n) = @(n3/1g?n), which is very
high.

Multithreading Strassen’s method

To multithread Strassen’s algorithm, we follow the same general outline as on
page 79, only using nested parallelism:

1. Divide the input matrices A and B and output matrix C into n/2 x n/2 sub-
matrices, as in equation (27.6). This step takes @(1) work and span by index
calculation.

2. Create 10 matrices S;,.S2,..., Si, each of which is n/2 x n/2 and is the sum
or difference of two matrices created in step 1. We can create all 10 matrices
with ©(n?) work and @(1g7) span by using doubly nested parallel for loops.

 
