374 Chapter 11 File-System Interface

the current operation location is kept as a per-process current-file-position
pointer. Both the read and write operations use this same pointer, saving
space and reducing the system complexity.

Repositioning within a file: The directory is searched for the appropriate
entry, and the current-file-position is set to a given value. Repositioning
within a file does not need to involve any actual I/O. This file operation is
also known as a file seek.

Deleting a file: To delete a file, we search the directory for the named file.
Having found the associated directory entry, we release all file space, so
that it can be reused by other files, and erase the directory entry.

 Truncating a file: The user may want to erase the contents of a file but keep
its attributes. Rather than forcing the user to delete the file and then recreate
it, this function allows all attributes to remain unchanged—except for file
Jength—but lets the file be reset to length zero and its file space released.

These six basic operations certainly comprise the minimal set of required
file operations. Other common operations include appending new information
to the end of an existing file and renaming an existing file. These primitive
operations may then be combined to perform other file operations. For instance,
creating a copy of a file, or copying the file to another 1/0 device, such as a
printer or a display, may be accomplished by creating a new file, and reading
from the old and writing to the new. We also want to have operations that allow
a user to get and set the various attributes of a file. For example, we may want
to have operations that allow a user to determine the status of a file, such as the
file’s length, and allow a user to set file attributes, such as the file’s owner.

Most of the file operations mentioned involve searching the directory for
the entry associated with the named file. To avoid this constant searching,
many systems require that an open system call be used before that file is first
used actively. The operating system keeps a small table containing information
about all open files (the open-file table). When a file operation is requested, the
file is specified via an index into this table, so no searching is required. When
the file is no longer actively used, it is closed by the process and the operating
system removes its entry in the open-file table.

Some systems implicitly open a file when the first reference is made to it.
The file is automatically closed when the job or program that opened the file
terminates. Most systems, however, require that the programmer open a file
explicitly with the open system call before that file can be used. The open
operation takes a file name and searches the directory, copying the directory
entry into the open-file table. The open call can also accept access-mode
information—create, read-only, read-write, append-only, and so on. This mode
is checked against the file’s permissions. If the request mode is allowed, the file
is opened for the process. The open system call will typically return a pointer
