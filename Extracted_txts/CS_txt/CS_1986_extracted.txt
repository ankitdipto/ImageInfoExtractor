12.5 Free-Space Management 431

12.5.1 Bit Vector

Frequently, the free-space list is implemented as a bit map or bit vector. Each
block is represented by 1 bit. If the block is free, the bit is 1; if the block is
allocated, the bit is 0.

For example, consider a disk where blocks 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 17,
18, 25, 26, and 27 are free, and the rest of the blocks are allocated. The free-
space bit map would be

001111001111110001100000011100000 ...

The main advantage of this approach is its relatively simplicity and effi-
ciency in finding the first free block, or n consecutive free blocks on the disk.
Indeed, many computers supply bit-manipulation instructions that can be
used effectively for that purpose. For example, the Intel family starting with
the 80386 and the Motorola family starting with the 68020 (processors that
have powered PCs and Macintosh systems, respectively) have instructions that
return the offset in a word of the first bit with the value 1. In fact, the Apple
Macintosh operating system uses the bit-vector method to allocate disk space.
To find the first free block, the Macintosh operating system checks sequentially
each word in the bit map to see whether that value is not 0, since a 0-valued
word has all 0 bits and represents a set of allocated blocks. The first non-0 word
is scanned for the first 1 bit, which is the location of the first free block. The
calculation of the block number is

(number of bits per word) x (number of 0-value words) + offset of first 1 bit.

Again, we see hardware features driving software functionality. Unfortu-
nately, bit vectors are inefficient unless the entire vector is kept in main memory
(and is written to disk occasionally for recovery needs). Keeping it in main
memory is possible for smaller disks, such as on microcomputers, but not for
larger ones. A 1.3-GB disk with 512-byte blocks would need a bit map of over
332 KB to track its free blocks. Clustering the blocks in groups of four reduces
this number to over 83 KB per disk.

12.5.2 Linked List

Another approach to free-space management is to link together all the free disk
blocks, keeping a pointer to the first free block in a special location on the disk
and caching it in memory. This first block contains a pointer to the next free
disk block, and so on. In our example (Section 12.5.1), we would keep a pointer
to block 2, as the first free block. Block 2 would contain a pointer to block
3, which would point to block 4, which would point to block 5, which would
point to block 8, and so on (Figure 12.10). However, this scheme is not efficient;
to traverse the list, we must read each block, which requires substantial I/O
