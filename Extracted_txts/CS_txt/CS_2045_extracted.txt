 

13.6 STREAMS 481

5. The device controller operates the device hardware to perform the data
transfer.

6. The driver may poll for status and data, or it may have set up a DMA
transfer into kernel memory. We assume that the transfer is managed by a
DMA controller, which generates an interrupt when the transfer completes.

7. The correct interrupt handler receives the interrupt via the interrupt-vector
table, stores any necessary data, signals the device driver, and returns from
the interrupt.

8. The device driver receives the signal, determines which I/O request com-
pleted, determines the request’s status, and signals the kernel I/O subsys-
tem that the request has been completed.

9. The kernel transfers data or return codes to the address space of the
requesting process, and moves the process from the wait queue back to
the ready queue.

10. Moving the process to the ready queue unblocks the process. When the
scheduler assigns the process to the CPU, the process resumes execution at
the completion of the system call.

13.6 =» STREAMS

UNIX System V has an interesting mechanism, called STREAMS, that enables
an application to assemble pipelines of driver code dynamically. A stream is
a full-duplex connection between a device driver and a user-level process. It
consists of a stream head that interfaces with the user process, a driver end
that controls the device, and zero or more stream modules between them. The
stream head, the driver end, and each module contain a pair of queues—a read
queue and a write queue. Message passing is used to transfer data between
queues. The STREAMS structure is shown in Figure 13.11.

Modules provide the functionality of STREAMS processing and they are
pushed onto a stream using the ioct1() system call. For example, a process
can open a serial-port device via a stream, and can push on a module to handle
input editing. Because messages are exchanged between queues in adjacent
modules, a queue in one module may overflow an adjacent queue. To prevent
this from occurring, a queue may support flow control. Without flow control,
a queue accepts all messages and immediately sends them on to the queue in
the adjacent module without buffering them. A queue supporting flow control
buffers messages and does not accept messages without sufficient buffer space.
Flow control is supported by exchanging control messages between queues in
adjacent modules.

A user process writes data to a device using either the write() or
putmsg() system calls. The write() system call writes raw data to the stream
