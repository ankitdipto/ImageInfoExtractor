 

13.7. Performance = 483

control as well. However, if a deviceâ€™s buffer is full, a device typically resorts to
dropping incoming messages. Consider a network card whose input buffer is
full. The network card must simply drop further messages until there is ample
buffer space to store incoming messages.

The benefit of using STREAMS is that it provides a framework to a modular
and incremental approach to writing device drivers and network protocols.

Modules may be used by different STREAMS and hence by different devices.
For example, a networking module may be used by both an Ethernet network
card and a token ring network card. Furthermore, rather than treating character
device I/O as an unstructured byte stream, STREAMS allow support for message
boundaries and control information between modules. Support for STREAMS
is widespread among most UNIX variants and it is the preferred method for
writing protocols and device drivers. For example, in System V UNIX and
Solaris, the socket mechanism is implemented using STREAMS.

13.7 = Performance

1/O is a major factor in system performance. It places heavy demands on
the CPU to execute device-driver code and to schedule processes fairly and
efficiently as they block and unblock. The resulting context switches stress
the CPU and its hardware caches. I/O also exposes any inefficiencies in the
interrupt-handling mechanisms in the kernel, and 1/O loads down the memory
bus during data copy between controllers and physical memory, and again
during copies between kernel buffers and application data space. Coping
gracefully with all these demands is one of the major concerns of a computer
architect.

Although modern computers can handle many thousands of interrupts per
second, interrupt handling is a relatively expensive task: Each interrupt causes
the system to perform a state change, to execute the interrupt handler, and
then to restore state. Programmed 1/O can be more efficient than interrupt-
driven I/O, if the number of cycles spent busy-waiting is not excessive. An
1/O completion typically unblocks a process, leading to the full overhead of a
context switch.

Network traffic can also cause a high context-switch rate. Consider, for
instance, a remote login from one machine to another. Each character typed on
the local machine must be transported to the remote machine. On the local
machine, the character is typed; a keyboard interrupt is generated; and the
character is passed through the interrupt handler to the device driver, to the
kernel, and then to the user process. The user process issues a network I/O
system call to send the character to the remote machine. The character then
flows into the local kernel, through the network layers that construct a network
packet, and into the network device driver. The network device driver transfers
the packet to the network controller, which sends the character and generates
