344

CHAFTERTEN Computer Arithmetic

 

(k = 3,m = 1). The number can be represented as 2'*! — 2" = 2* — 2! = 16—
2= 14. Therefore, the multiplicationM x 14, where Mis the multiplicand and
14 the multiplier, can be done as M x 2 ~ M x 2!. Thus the product can be
obtained by shifting the binary multiplicand M four times to the left and
subtracting M shifted left once.

‘As in all multiplication schemes, Booth algorithm requires examination
of the multiplier bits and shifting of the partial product. Prior to the shifting,
the multiplicand may be added to the partial product, subtracted from the
partial product, or left unchanged according to the following rules:

1. The multiplicandis subtracted from the partial product upon encounter-
ing the first least significant 1 in a string of 1’s in the multiplier.

2. Themultiplicand is added to the partial product upon encountering the
first 0 (provided that there was a previous 1) in a string of 0's in the
multiplier.

3. The partial product does not change when the multiplier bitis identical
to the previous multiplier bit.

The algorithm works for positive or negative multipliers in 2's comple-
ment representation. This is because a negative multiplier ends with a string
of I's and the last operation will be a subtraction of the appropriate weight
For example, a multiplier equal to ~14 is represented in 2’s complement as.
110010 and is treated as —2‘ + 2° - 2' = -14.

The hardware implementation of Booth algorithm requires the register
configuration shownin Fig. 10-7. Thisis similar to Fig. 10-5 except that the sign
bits are not separated from the rest of the registers. To show this difference,
we rename registers A, B, and Q, as AC, BR, and QR, respectively. Q, desig-
nates the least significant bit of the multiplier in register QR. An extra flip-flop
Qu+1 is appended to QR to facilitate a double bit inspection of the multiplier.
The flowchart for Booth algorithm is shown in Fig. 10-8. AC and the appended

 

Figure 10-7 Hardware for Booth algorithm.

 

 

 

 

 

 

 

 

BR register ‘Sequence counter (SC)
Complement and
Perle! oer
Qn One
‘AC register }+| OR reginer pty

 
