10-5,

10-6.

10-7.

10-8.

10-9,

10-10.

10-11.

10-12.

10-13.

10-14.

10-15.

10-16.

10-17.

Problems = 37

that the sum (+X) + (£Y) can be formed by adding the numbers including,

their sign bits and discarding the carry-out of the sign-bit position. In other

words, prove the algorithm for adding two binary numbers in signed-2’s
complement representation.

Formulatea hardware procedure for detecting an overflow by comparing the

sign of the sum with the signs of the augend and addend. The numbers are

in signed-2's complement representation.

1. Perform the operation (-9) + (~6) = -15 with binary numbers in
signed-1's complement representation using only five bits to represent
each number (including the sign). Show that the overflow detection
procedure of checking the inequality of the last two carries fails in this
case.

b. Suggest a modified procedure for detecting an overflow when signed-1’s
complement numbers are used.

Derive an algorithm in flowchart form for adding and subtracting two fixed-

point binary numbers when negativenumbersarein signed-1's complement

representation.

Prove thatthe multiplication of two n-digit numbers in base r gives a product

no more than 2n digits in length. Show that this statement implies that no

overflow can occur in the multiplication operation.

Show the contents ofregisters E, A, Q, and SC (as in Table 10-2) during the

Process of multiplication of two binary numbers, 11111 (multiplicand) and

10101 (multiplier). The signs are not included.

Show the contents of registers E, A, Q, and SC (as in Fig. 10-12) during the

Process of division of (a) 10100011 by 1011; (6) 00001111 by 0011. (Use a

dividend of eight bits)

Show thatadding B afterthe operationA + B + 1restorestheoriginalvalue

of A. What should be done with the end carry?

Why should the sign of theremainder aftera division be the sameas the sign

of the dividend?

Design anarray multiplier that multipliestwo4-bitnumbers. Use AND gates

and binary adders.

Show the step-by-step multiplication process using Booth algorithm (as in

Table 10-3) when the following binary numbers are multiplied. Assume5-bit

registers that hold signed numbers. The multiplicand in both cases is +15.

a. (+15) * (+13)

b. (+15) x (-13)

Derivean algorithm in flowchart form for the nonrestoring method of fixed-

point binary division.

Derive an algorithm for evaluating the square root of a binary fixed-point

number.

‘A binary floating-point number has seven bits for a biased exponent. The

constant used for the bias is 64.

4. List the biased representation of all exponents from ~64 to +63.

 

 
