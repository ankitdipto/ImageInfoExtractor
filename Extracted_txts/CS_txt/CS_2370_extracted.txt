508 CHAPTER THRTEEN Multiprocessors,

critical section

hardware lock

Mutual Exclusion with a Semaphore

‘A properly functioning multiprocessor system must provide a mechanism that
will guarantee orderly access to shared memory and other shared resources.
This is necessary to protect data from being changed simultaneously by two
or more processors. This mechanism has been termed mutual exclusion. Mutual
exclusion mustbe provided in a multiprocessor system to enable one processor
to exclude or lock out access to a shared resource by other processors when
itis in acritical section. A critical section isa program sequence that, once begun,
must complete execution before another processor accesses the same shared
resource.

‘binary variable called a semaphore is often used to indicate whether or
not a processor is executing a critical section. A semaphore is a software-
controlled flag thatis stored ina memory location that all processors can access.
When the semaphore is equal to 1, it means that a processor is executing a
critical program, so that the shared memory isnot available to other processors.
When the semaphore is equal to 0, the shared memory is available to any
requesting processor. Processors that share the same memory segment agree
by convention not to use the memory segment unless the semaphore is equal
t0 0, indicating that memory is available. They also agree to set the semaphore
to 1 when they are executing a critical section and to clear it to 0 when they
are finished.

Testing and setting the semaphore is itself a critical operation and must
be performed as a single indivisible operation. If it is not, two or more proces-
sors may test the semaphore simultaneously and then each set it, allowing
them to enter a critical section at the same time. This action would allow
simultaneous execution of critical section, which can result in erroneous initial-
ization of control parameters and a loss of essential information.

‘Asemaphore can be initialized by means of a test and set instruction in
conjunction with a hardware lock mechanism. A hardware lock is a processor-
generated signal that serves to prevent other processors from using the system
bus as long as the signal is active. The test-and-set instruction tests and sets
a semaphore andactivates the lock mechanism during the time that the instruc-
tion is being executed. This prevents other processors from changing the
semaphore between the time that the processor is testing it and the time that
it is setting it. Assume that the semaphore is a bit in the least significant
position of a memory word whose address is symbolized by SEM. Let
the mnemonic TSL designate the “test and set while locked” operation. The
instruction

TSL SEM

will be executed in two memory cycles (the first to read and the second to write)
without interference as follows:

R<MISEM] Test semaphore
MISEM]<1 Set semaphore
