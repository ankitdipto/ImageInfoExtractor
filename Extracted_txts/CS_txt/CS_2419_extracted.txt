Problems for Chapter 2 39

2.3-3
Use mathematical induction to show that when 1 is an exact power of 2, the solu-
tion of the recurrence

2 ifn =2,

Tin) =
= ) ornj2) +n ifn =2, fork > 1

is T(n) =nlgn.

2.34

We can express insertion sort as a recursive procedure as follows. In order to sort
A[1..n], we recursively sort A[1 ..—1] and then insert A[n] into the sorted array
A[1..n — 1]. Write a recurrence for the running time of this recursive version of
insertion sort.

23-5

Referring back to the searching problem (see Exercise 2.1-3), observe that if the
sequence A is sorted, we can check the midpoint of the sequence against v and
eliminate half of the sequence from further consideration. The binary search al-
gorithm repeats this procedure, halving the size of the remaining portion of the
sequence each time. Write pseudocode, either iterative or recursive, for binary
search. Argue that the worst-case running time of binary search is O(lg).

2.3-6

Observe that the while loop of lines 5-7 of the INSERTION-SoRT procedure in
Section 2.1 uses a linear search to scan (backward) through the sorted subarray
A{l..j — 1]. Can we use a binary search (see Exercise 2.3-5) instead to improve
the overall worst-case running time of insertion sort to O(n lg)?

23-7 *
Describe a O(n lgn)-time algorithm that, given a set S of n integers and another
integer x, determines whether or not there exist two elements in S whose sum is
exactly x.

 

Problems

2-1 Insertion sort on small arrays in merge sort

Although merge sort runs in @(n1lgn) worst-case time and insertion sort runs
in @(n7) worst-case time, the constant factors in insertion sort can make it faster
in practice for small problem sizes on many machines. Thus, it makes sense to
coarsen the leaves of the recursion by using insertion sort within merge sort when
