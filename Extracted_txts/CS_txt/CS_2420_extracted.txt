40

Chapter 2. Getting Started

subproblems become sufficiently small. Consider a modification to merge sort in
which n/k sublists of length k are sorted using insertion sort and then merged
using the standard merging mechanism, where k is a value to be determined.

a. Show that insertion sort can sort the n/k sublists, each of length k, in @(nk)
worst-case time.

b. Show how to merge the sublists in ©(n lg(n/k)) worst-case time.

c. Given that the modified algorithm runs in O(nk +n lg(n/k)) worst-case time,
what is the largest value of k as a function of n for which the modified algorithm
has the same running time as standard merge sort, in terms of ©-notation?

d. How should we choose k in practice?

2-2 Correctness of bubblesort
Bubblesort is a popular, but inefficient, sorting algorithm. It works by repeatedly
swapping adjacent elements that are out of order.

BUBBLESORT(A)

1 fori = 1 to A.length —1

2 for j = A.length downtoi + 1

3 if AL] < AL — 1)

4 exchange A[/] with A[j — 1]

a. Let A’ denote the output of BUBBLESORT(A). To prove that BUBBLESORT is
correct, we need to prove that it terminates and that

All] s AR] s+ < AT]. (2.3)

where n = A. length. In order to show that BUBBLESORT actually sorts, what
else do we need to prove?

The next two parts will prove inequality (2.3).

b. State precisely a loop invariant for the for loop in lines 2-4, and prove that this
loop invariant holds. Your proof should use the structure of the loop invariant
proof presented in this chapter.

c. Using the termination condition of the loop invariant proved in part (b), state
a loop invariant for the for loop in lines 14 that will allow you to prove in-
equality (2.3). Your proof should use the structure of the loop invariant proof
presented in this chapter.
