Chapter 3 Growth of Functions

and j are both at most 7, and the inner loop is executed at most once for each of
the n? pairs of values for i and j.

Since O-notation describes an upper bound, when we use it to bound the worst-
case running time of an algorithm, we have a bound on the running time of the algo-
rithm on every input—the blanket statement we discussed earlier. Thus, the O(n)
bound on worst-case running time of insertion sort also applies to its running time
on every input. The ©(n?) bound on the worst-case running time of insertion sort,
however, does not imply a @(n?) bound on the running time of insertion sort on
every input. For example, we saw in Chapter 2 that when the input is already
sorted, insertion sort runs in ©(1) time.

Technically, it is an abuse to say that the running time of insertion sort is O(n”),
since for a given n, the actual running time varies, depending on the particular
input of size n. When we say “the running time is O(n?),” we mean that there is a
function f (1) that is O(n) such that for any value of n, no matter what particular
input of size n is chosen, the running time on that input is bounded from above by
the value f(n). Equivalently, we mean that the worst-case running time is O(n?).

Q-notation

Just as O-notation provides an asymptotic upper bound on a function, Q-notation
provides an asymptotic lower bound. For a given function g(n), we denote
by Q(g(n)) (pronounced “big-omega of g of n” or sometimes just “omega of g
of n”) the set of functions

Q(g(n)) = {f(n) : there exist positive constants c and 9 such that
0 <cg(n) < f(n) for alln > no}.

Figure 3.1(c) shows the intuition behind Q-notation. For all values 7 at or to the
right of 19, the value of f (7) is on or above cg(n).

From the definitions of the asymptotic notations we have seen thus far, it is easy
to prove the following important theorem (see Exercise 3.1-5).

Theorem 3.1
For any two functions f(n) and g(n), we have f(n) = ©(g(n)) if and only if
fM) = O(g)) and fn) = Q(g(n)). .

As an example of the application of this theorem, our proof that an? + bn +c=
©(n?) for any constants a, b, and c, where a > 0, immediately implies that
an? +bn +c = Q(n?) andan?+bn+c = O(n’). In practice, rather than using
Theorem 3.1 to obtain asymptotic upper and lower bounds from asymptotically
tight bounds, as we did for this example, we usually use it to prove asymptotically
tight bounds from asymptotic upper and lower bounds.
