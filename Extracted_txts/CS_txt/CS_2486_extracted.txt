Chapter 4 Divide-and-Conquer

The recurrence (4.20) describes the running time of an algorithm that divides a
problem of size n into a subproblems, each of size n/b, where a and b are positive
constants. The a subproblems are solved recursively, each in time T(n/b). The
function f(n) encompasses the cost of dividing the problem and combining the
results of the subproblems. For example, the recurrence arising from Strassen’s
algorithm has a = 7, b = 2, and f(n) = @(n?).

As a matter of technical correctness, the recurrence is not actually well defined,
because n/b might not be an integer. Replacing each of the a terms T(n/b) with
either T([n/b|) or T([n/b]) will not affect the asymptotic behavior of the recur-
rence, however. (We will prove this assertion in the next section.) We normally
find it convenient, therefore, to omit the floor and ceiling functions when writing
divide-and-conquer recurrences of this form.

The master theorem

The master method depends on the following theorem.

Theorem 4.1 (Master theorem)
Let a > 1 andb > 1 be constants, let f(n) be a function, and let T(n) be defined
on the nonnegative integers by the recurrence

T(n) =aT(n/b) + fn),

where we interpret 1/b to mean either [n/b | or [n/b]. Then T (1) has the follow-
ing asymptotic bounds:

1. If f(n) = O(n'*® *) for some constant € > 0, then T(n) = O(n! 4),
2. If f(n) = O(n"), then T(n) = O(n“ Ign).

3. If f(n) = Q(n'8+ 4") for some constant € > 0, and if af(n/b) < cf(n) for
some constant c < | and all sufficiently large n, then T(n) = O(f(n)). .

Before applying the master theorem to some examples, let’s spend a moment
trying to understand what it says. In each of the three cases, we compare the
function f(n) with the function '°8+. Intuitively, the larger of the two functions
determines the solution to the recurrence. If, as in case 1, the function n!°2¢ is the
larger, then the solution is T(n) = @(n'**). If, as in case 3, the function f(n)
is the larger, then the solution is T(n) = ©(f(n)). If, as in case 2, the two func-
tions are the same size, we multiply by a logarithmic factor, and the solution is
T(n) = O(n' 4 1gn) = O( f(n) Ign).

Beyond this intuition, you need to be aware of some technicalities. In the first
case, not only must f(7) be smaller than n'°2>“, it must be polynomially smaller.
