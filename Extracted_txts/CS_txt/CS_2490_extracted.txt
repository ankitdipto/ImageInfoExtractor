Chapter 4 Divide-and-Conquer

bounds be proved for all sufficiently large numbers, not just those that are pow-
ers of b. Since we could make new asymptotic notations that apply only to the set
{b' :i =0,1,2,...}, instead of to the nonnegative numbers, this abuse is minor.

Nevertheless, we must always be on guard when we use asymptotic notation over
a limited domain lest we draw improper conclusions. For example, proving that
T(n) = O(n) when n is an exact power of 2 does not guarantee that T(n) = O(n).
The function T(n) could be defined as

n ifn =1,2,4,8,...,

Tin)=
®) 2 otherwise ,

n
in which case the best upper bound that applies to all values of n is T(n) = O(n?).
Because of this sort of drastic consequence, we shall never use asymptotic notation
over a limited domain without making it absolutely clear from the context that we
are doing so.

4.6.1 The proof for exact powers
The first part of the proof of the master theorem analyzes the recurrence (4.20)
T(n) =aT(n/b) + fn),

for the master method, under the assumption that m is an exact power of b > 1,
where b need not be an integer. We break the analysis into three lemmas. The first
reduces the problem of solving the master recurrence to the problem of evaluating
an expression that contains a summation. The second determines bounds on this
summation. The third lemma puts the first two together to prove a version of the
master theorem for the case in which n is an exact power of b.

Lemma 4.2
Let a > 1 and b > 1 be constants, and let f(1) be a nonnegative function defined
on exact powers of b. Define T(m) on exact powers of b by the recurrence

e(1) ifn =1,

TQ) = aT(n/b) + f(n) ifn=b',
where / is a positive integer. Then
log, n—1
Tin) = O(n") + > a’ f(n/b’). (4.21)
j=0

Proof We use the recursion tree in Figure 4.7. The root of the tree has cost f(m),
and it has a children, each with cost f(n/b). (It is convenient to think of a as being
