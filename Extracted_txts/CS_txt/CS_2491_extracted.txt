330

Chapter 10. Logical Reasoning Systems

ming languages as such and had control structures other than backtracking. PLANNER (Hewitt,
1969), although never actually implemented, was a very complex language that used auto-
matic backtracking mechanisms analogous to the Prolog control structure. A subset known as
MICRO-PLANNER (Sussman and Winograd, 1970) was implemented and used in the SHRDLU nat- 3
ural language understanding system (Winograd, 1972). The CONNIVER language (Sussman and
McDermott, 1972) allowed finer programmer control over backtracking than MICRO-PLANNER. +
CONNIVER was used in the HACKER (Sussman, 1975) and BUILD (Fahlman, 1974) planning sys-
tems. QLIsP (Sacerdoti et al/., 1976) used pattern matching to initiate function calls, as Prolog ’
does; itwas used in the NOAH planning system (Sacerdoti, 1975; Sacerdoti, 1977). More recently,
POPLOG (Sloman, 1985) has attempted to incorporate several programming languages, including
Lisp, Prolog, and POP-11 (Barrett et al, 1985), into an integrated system.

Reasoning systems with metalevel capabilities were first proposed by Hayes (1973), but 4
his GOLUX system was never built (a fate that also befell Doyle's (1980) ambitious SEAN system).
AMORD (de Kleer er al., 1977)put some ofthese ideas intopractice, asdid TEIRESIAS (Davis, 1980) §
in the field ofrule-based expert systems. In the area oflogic programming systems, MRS (Gene-
sereth and Smith, 1981; Russell, 1985) provided extensive metalevel facilities. Dincbas and Le
Pape (1984) describe a similar system called METALOG. The work of David E. Smith (1989) on
controlling logical inference builds on MRS. Alan Bundy's (1983) PRESS system used logical rea-
soning at the metalevel to guide the use of equality reasoning in solving algebra and trigonometry
problems. It was able to attain humanlike performance on the British A-level exams for advanced
precollege students, although equality reasoning had previously been thought to be a very difficult
problem for automated reasoning systems. Guard ef al. (1969) describe the early SAM theorem
prover, which helped to solve an open problem in lattice theory. Wos and Winker (1983) give an #
overview of the contributions of AURA theorem prover toward solving open problems in various
areas of mathematics and logic. McCune (1992) follows up on this, recounting the accomplish-
ments of AURA'S successor OTTER in solving open problems. McAllester (1989) describes the j
Onrtic expert assistant system for mathematics research.

A Computational Logic (Boyer and Moore, 1979)is the basic reference on the Boyer-Moore
theorem prover. Stickel (1988) covers the Prolog Technology Theorem Prover (PTTP), which
incorporates the technique of locking introduced by Boyer (1971).

Early work in automated program synthesis was done by Simon (1963), Green (1969a), and
Manna and Waldinger (1971). The transformational system of Burstall and Darlington (1977) |
used equational reasoning with recursion equations for program synthesis. Barstow (1979)
provides an early book-length treatment. Raprs (Paige and Henglein, 1987) takes an approach
that views automated synthesis as an extension of the process of compilation. KIDS (Smith,
1990) is one of the strongest modern systems; it operates as an expert assistant. Manna and
Waldinger (1992) give a tutorial introduction to the current state of the art, with emphasis on
their own deductive approach. Automating Software Design (Lowry and McCartney, 1991) is an
anthology; the articles describe a number of current approaches

There are a number of textbooks on logic programming and Prolog. Logic for Problem
Solving (Kowalski, 1979b) is an early text on logic programming in general, with a number of
exercises. Several textbooks on Prolog are available (Clocksin and Mellish, 1987; Sterling and
Shapiro, 1986; O'Keefe, 1990; Bratko, 1990). Despite focusing on Common Lisp, Norvig ( 1992)
gives a good deal of basic information about Prolog, as well as suggestions for implementing

 
