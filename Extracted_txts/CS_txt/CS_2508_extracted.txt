Notes for Chapter 4 Wm

c. Let f (i) be the index of the column containing the leftmost minimum element
of row i. Prove that f(1) < f(2) <--- < f(m) for any m xn Monge array.

d. Here is a description of a divide-and-conquer algorithm that computes the left-
most minimum element in each row of an m xn Monge array A:

Construct a submatrix A’ of A consisting of the even-numbered rows of A.
Recursively determine the leftmost minimum for each row of A’. Then
compute the leftmost minimum in the odd-numbered rows of A.

Explain how to compute the leftmost minimum in the odd-numbered rows of A
(given that the leftmost minimum of the even-numbered rows is known) in
O(m +n) time.

e. Write the recurrence describing the running time of the algorithm described in
part (d). Show that its solution is O(m + n log m).

 

Chapter notes

Divide-and-conquer as a technique for designing algorithms dates back to at least
1962 in an article by Karatsuba and Ofman [194]. It might have been used well be-
fore then, however; according to Heideman, Johnson, and Burrus [163], C. F. Gauss
devised the first fast Fourier transform algorithm in 1805, and Gauss’s formulation
breaks the problem into smaller subproblems whose solutions are combined.

The maximum-subarray problem in Section 4.1 is a minor variation on a problem
studied by Bentley [43, Chapter 7].

Strassen’s algorithm [325] caused much excitement when it was published
in 1969. Before then, few imagined the possibility of an algorithm asymptotically
faster than the basic SQUARE-MATRIX-MULTIPLY procedure. The asymptotic
upper bound for matrix multiplication has been improved since then. The most
asymptotically efficient algorithm for multiplying n x n matrices to date, due to
Coppersmith and Winograd [78], has a running time of O(n?-37°). The best lower
bound known is just the obvious Q(n) bound (obvious because we must fill in 1?
elements of the product matrix).

From a practical point of view, Strassen’s algorithm is often not the method of
choice for matrix multiplication, for four reasons:

1. The constant factor hidden in the @(n'£’) running time of Strassen’s algo-
rithm is larger than the constant factor in the @(n3)-time SQUARE-MATRIX-
MULTIPLY procedure.

2. When the matrices are sparse, methods tailored for sparse matrices are faster.
