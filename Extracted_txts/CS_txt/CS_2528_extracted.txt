128 Chapter 5 Probabilistic Analysis and Randomized Algorithms

 

Pr{E2N Ey} = Prt | Ei}Pr{Ei}
1 (n-i +D!
~ n-i+l- n!
(n—i)!
~ nyo

Termination: At termination, i = n + 1, and we have that the subarray A[1..7]
is a given n-permutation with probability (n—(n+1)+1)/n! = 0!/n! = 1/n!.

Thus, RANDOMIZE-IN-PLACE produces a uniform random permutation. .

A randomized algorithm is often the simplest and most efficient way to solve a
problem. We shall use randomized algorithms occasionally throughout this book.

Exercises

5.3-1

Professor Marceau objects to the loop invariant used in the proof of Lemma 5.5. He
questions whether it is true prior to the first iteration. He reasons that we could just
as easily declare that an empty subarray contains no 0-permutations. Therefore,
the probability that an empty subarray contains a 0-permutation should be 0, thus
invalidating the loop invariant prior to the first iteration. Rewrite the procedure
RANDOMIZE-IN-PLACE So that its associated loop invariant applies to a nonempty
subarray prior to the first iteration, and modify the proof of Lemma 5.5 for your
procedure.

5.3-2
Professor Kelp decides to write a procedure that produces at random any permuta-
tion besides the identity permutation. He proposes the following procedure:

PERMUTE-WITHOUT-IDENTITY (A)

1 n= A.length

2 fori = lton—1

3 swap A[i] with A[RANDoM(i + 1,n)]

Does this code do what Professor Kelp intends?

5.3-3
Suppose that instead of swapping element A[i] with a random element from the
subarray A[i..n], we swapped it with a random element from anywhere in the
array:
