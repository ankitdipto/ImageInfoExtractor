6.1 Heaps 153

values no larger than that contained at the node itself. A min-heap is organized in
the opposite way; the min-heap property is that for every node i other than the
root,

A[PARENT(i)] < Afi] .

The smallest element in a min-heap is at the root.

For the heapsort algorithm, we use max-heaps. Min-heaps commonly imple-
ment priority queues, which we discuss in Section 6.5. We shall be precise in
specifying whether we need a max-heap or a min-heap for any particular applica-
tion, and when properties apply to either max-heaps or min-heaps, we just use the
term “heap.”

Viewing a heap as a tree, we define the height of a node in a heap to be the
number of edges on the longest simple downward path from the node to a leaf, and
we define the height of the heap to be the height of its root. Since a heap of n ele-
ments is based on a complete binary tree, its height is @ (Ig 7) (see Exercise 6. 1-2).
We shall see that the basic operations on heaps run in time at most proportional
to the height of the tree and thus take O(lg m) time. The remainder of this chapter
presents some basic procedures and shows how they are used in a sorting algorithm
and a priority-queue data structure.

* The MAx-HEaPIFyY procedure, which runs in O(lg/) time, is the key to main-
taining the max-heap property.

* The BUILD-MAX-HEAP procedure, which runs in linear time, produces a max-
heap from an unordered input array.

* The HEAPSORT procedure, which runs in O(nlgn) time, sorts an array in
place.

* The MAXx-HEAP-INSERT, HEAP-EXTRACT-MAX, HEAP-INCREASE-KEY,
and HEAP-MAXIMUM procedures, which run in O(lg7) time, allow the heap
data structure to implement a priority queue.

Exercises

6.1-1
What are the minimum and maximum numbers of elements in a heap of height ?

6.1-2
Show that an n-element heap has height [lg].

6.1-3
Show that in any subtree of a max-heap, the root of the subtree contains the largest
value occurring anywhere in that subtree.
