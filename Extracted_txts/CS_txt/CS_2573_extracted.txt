164

Chapter 6 Heapsort

the procedure then, in a manner reminiscent of the insertion loop (lines 5-7) of
INSERTION-SoRT from Section 2.1, traverses a simple path from this node toward
the root to find a proper place for the newly increased key. As HEAP-INCREASE-
Key traverses this path, it repeatedly compares an element to its parent, exchang-
ing their keys and continuing if the element’s key is larger, and terminating if the el-
ement’s key is smaller, since the max-heap property now holds. (See Exercise 6.5-5
for a precise loop invariant.)

HEAP-INCREASE-KEY (A, i, key)
if key < Ai]
error “new key is smaller than current key”
Ali] = key
while i > 1 and A[PARENT(i)] < Ali]
exchange A[i] with A[PARENT(i)]
i = PARENT(i)

AnkRwWNe

Figure 6.5 shows an example of a HEAP-INCREASE-KEY operation. The running
time of HEAP-INCREASE-KEY on an n-element heap is O(lg7), since the path
traced from the node updated in line 3 to the root has length O(Ig7).

The procedure MAX-HEAP-INSERT implements the INSERT operation. It takes
as an input the key of the new element to be inserted into max-heap A. The proce-
dure first expands the max-heap by adding to the tree a new leaf whose key is —oo.
Then it calls HEAP-INCREASE-KEY to set the key of this new node to its correct
value and maintain the max-heap property.

MAX-HEAP-INSERT(A, key)

1 A.heap-size = A.heap-size + 1

2 A[A.heap-size] = —0o

3 HEAP-INCREASE-KEY (A, A. heap-size, key)

The running time of MAX-HEAP-INSERT on an n-element heap is O(lg7).
In summary, a heap can support any priority-queue operation on a set of size n
in O(lgn) time.

Exercises

6.5-1
Illustrate the operation of HEAP-EXTRACT-MAX on the heap A = (15, 13, 9,5,
12,8,7,4,0,6,2,1).
