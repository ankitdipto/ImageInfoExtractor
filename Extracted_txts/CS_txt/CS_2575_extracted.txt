166

Chapter 6 Heapsort

6.5-5
Argue the correctness of HEAP-INCREASE-KEY using the following loop invari-
ant:

At the start of each iteration of the while loop of lines 4-6, the subarray
A[l .. A.heap-size] satisfies the max-heap property, except that there may
be one violation: A[/] may be larger than A[PARENT(i)].

You may assume that the subarray A[1 .. A.heap-size] satisfies the max-heap prop-
erty at the time HEAP-INCREASE-KEY is called.

6.5-6

Each exchange operation on line 5 of HEAP-INCREASE-KEY typically requires
three assignments. Show how to use the idea of the inner loop of INSERTION-
SorT to reduce the three assignments down to just one assignment.

6.5-7

Show how to implement a first-in, first-out queue with a priority queue. Show
how to implement a stack with a priority queue. (Queues and stacks are defined in
Section 10.1.)

6.5-8

The operation HEAP-DELETE(A, /) deletes the item in node i from heap A. Give
an implementation of HEAP-DELETE that runs in O(lg7) time for an n-element
max-heap.

6.5-9

Give an O(nlgk)-time algorithm to merge k sorted lists into one sorted list,
where 71 is the total number of elements in all the input lists. (Hint: Use a min-
heap for k-way merging.)

 

Problems

6-1 Building a heap using insertion

We can build a heap by repeatedly calling MAX-HEAP-INSERT to insert the ele-
ments into the heap. Consider the following variation on the BUILD-MAX-HEAP
procedure:
