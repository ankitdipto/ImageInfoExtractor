188

Chapter 7 Quicksort

7-4 Stack depth for quicksort

The QuICKsoRT algorithm of Section 7.1 contains two recursive calls to itself.
After QUICKSORT calls PARTITION, it recursively sorts the left subarray and then
it recursively sorts the right subarray. The second recursive call in QUICKSORT
is not really necessary; we can avoid it by using an iterative control structure.
This technique, called tail recursion, is provided automatically by good compilers.
Consider the following version of quicksort, which simulates tail recursion:

TAIL-RECURSIVE-QUICKSORT(A, p,1")

1 while p <r

2 // Partition and sort left subarray.

3 gq = PARTITION(A, pr)

4 TAIL-RECURSIVE-QUICKSORT (A, p,q — 1)
5 p=qt+l

a. Argue that TAIL-RECURSIVE-QUICKSORT(A, 1, A.length) correctly sorts the
array A.

Compilers usually execute recursive procedures by using a stack that contains per-
tinent information, including the parameter values, for each recursive call. The
information for the most recent call is at the top of the stack, and the information
for the initial call is at the bottom. Upon calling a procedure, its information is
pushed onto the stack; when it terminates, its information is popped. Since we
assume that array parameters are represented by pointers, the information for each
procedure call on the stack requires O(1) stack space. The stack depth is the max-
imum amount of stack space used at any time during a computation.

b. Describe a scenario in which TAIL-RECURSIVE-QUICKSORT’s stack depth is
@(n) on an n-element input array.

c. Modify the code for TAIL-RECURSIVE-QUICKSORT so that the worst-case
stack depth is O(lg7). Maintain the O(nlgn) expected running time of the
algorithm.

7-5 Median-of-3 partition

One way to improve the RANDOMIZED-QUICKSORT procedure is to partition
around a pivot that is chosen more carefully than by picking a random element
from the subarray. One common approach is the median-of-3 method: choose
the pivot as the median (middle element) of a set of 3 elements randomly selected
from the subarray. (See Exercise 7.4-6.) For this problem, let us assume that the
elements in the input array A[1../] are distinct and that n > 3. We denote the
