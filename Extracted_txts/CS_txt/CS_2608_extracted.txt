8.1 Lower bounds for sorting 193

execution of the comparison sort. (We shall refer to such leaves as “reachable.”)
Thus, we shall consider only decision trees in which each permutation appears as
a reachable leaf.

A lower bound for the worst case

The length of the longest simple path from the root of a decision tree to any of
its reachable leaves represents the worst-case number of comparisons that the cor-
responding sorting algorithm performs. Consequently, the worst-case number of
comparisons for a given comparison sort algorithm equals the height of its decision
tree. A lower bound on the heights of all decision trees in which each permutation
appears as a reachable leaf is therefore a lower bound on the running time of any
comparison sort algorithm. The following theorem establishes such a lower bound.

Theorem 8.1
Any comparison sort algorithm requires Q(n lg) comparisons in the worst case.

Proof From the preceding discussion, it suffices to determine the height of a
decision tree in which each permutation appears as a reachable leaf. Consider a
decision tree of height / with / reachable leaves corresponding to a comparison
sort on 1 elements. Because each of the n! permutations of the input appears as
some leaf, we have n! < /. Since a binary tree of height / has no more than 2h
leaves, we have

ni<1l<2',

which, by taking logarithms, implies

h > Ig(n!) (since the lg function is monotonically increasing)
= Q(nlgn) (by equation (3.19)) . .
Corollary 8.2

Heapsort and merge sort are asymptotically optimal comparison sorts.

Proof The O(nlgn) upper bounds on the running times for heapsort and merge
sort match the Q(n 1g) worst-case lower bound from Theorem 8.1. .

Exercises

81-1
What is the smallest possible depth of a leaf in a decision tree for a comparison
sort?
