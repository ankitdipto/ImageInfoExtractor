194

Chapter 8 Sorting in Linear Time

8.1-2

Obtain asymptotically tight bounds on lg(n!) without using Stirling’s approxi-
mation. Instead, evaluate the summation )“;_, lgk using techniques from Sec-
tion A.2.

8.1-3

Show that there is no comparison sort whose running time is linear for at least half
of the 7! inputs of length n. What about a fraction of 1/n of the inputs of length n?
What about a fraction 1/2”?

81-4

Suppose that you are given a sequence of n elements to sort. The input sequence
consists of n/k subsequences, each containing k elements. The elements in a given
subsequence are all smaller than the elements in the succeeding subsequence and
larger than the elements in the preceding subsequence. Thus, all that is needed to
sort the whole sequence of length n is to sort the k elements in each of the n/k
subsequences. Show an Q(nlgk) lower bound on the number of comparisons
needed to solve this variant of the sorting problem. (Hint: It is not rigorous to
simply combine the lower bounds for the individual subsequences.)

 

8.2 Counting sort

Counting sort assumes that each of the n input elements is an integer in the range
0 to k, for some integer k. When k = O(n), the sort runs in ©(7) time.

Counting sort determines, for each input element x, the number of elements less
than x. It uses this information to place element x directly into its position in the
output array. For example, if 17 elements are less than x, then x belongs in output
position 18. We must modify this scheme slightly to handle the situation in which
several elements have the same value, since we do not want to put them all in the
same position.

In the code for counting sort, we assume that the input is an array A[1..7], and
thus A. length = n. We require two other arrays: the array B[1..n] holds the
sorted output, and the array C[0..k] provides temporary working storage.
