196

Chapter 8 Sorting in Linear Time

Finally, the for loop of lines 10-12 places each element A[j] into its correct
sorted position in the output array B. If all n elements are distinct, then when we
first enter line 10, for each A[j], the value C[A[/]] is the correct final position
of A[j] in the output array, since there are C[A[j/]] elements less than or equal
to A[j]. Because the elements might not be distinct, we decrement C[A[j]] each
time we place a value A[j/] into the B array. Decrementing C[A[/]] causes the
next input element with a value equal to A[/], if one exists, to go to the position
immediately before A[/] in the output array.

How much time does counting sort require? The for loop of lines 2-3 takes
time ©(k), the for loop of lines 4—5 takes time ©(), the for loop of lines 7-8 takes
time @(k), and the for loop of lines 10-12 takes time ©(7). Thus, the overall time
is O(k +n). In practice, we usually use counting sort when we have k = O(n), in
which case the running time is ©().

Counting sort beats the lower bound of Q(n lg) proved in Section 8.1 because
it is not a comparison sort. In fact, no comparisons between input elements occur
anywhere in the code. Instead, counting sort uses the actual values of the elements
to index into an array. The Q(n lg 1) lower bound for sorting does not apply when
we depart from the comparison sort model.

An important property of counting sort is that it is stable: numbers with the same
value appear in the output array in the same order as they do in the input array. That
is, it breaks ties between two numbers by the rule that whichever number appears
first in the input array appears first in the output array. Normally, the property of
stability is important only when satellite data are carried around with the element
being sorted. Counting sort’s stability is important for another reason: counting
sort is often used as a subroutine in radix sort. As we shall see in the next section,
in order for radix sort to work correctly, counting sort must be stable.

Exercises

8.2-1
Using Figure 8.2 as a model, illustrate the operation of COUNTING-SORT on the
array A = (6,0,2,0,1,3.4,6,1,3,2).

8.2-2
Prove that COUNTING-SoRT is stable.

8.2-3
Suppose that we were to rewrite the for loop header in line 10 of the COUNTING-
SORT as

10 for j = 1 to A.length
Show that the algorithm still works properly. Is the modified algorithm stable?
