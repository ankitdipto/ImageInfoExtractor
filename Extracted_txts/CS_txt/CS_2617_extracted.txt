200

Chapter 8 Sorting in Linear Time

8.3-2

Which of the following sorting algorithms are stable: insertion sort, merge sort,
heapsort, and quicksort? Give a simple scheme that makes any sorting algorithm
stable. How much additional time and space does your scheme entail?

8.3-3
Use induction to prove that radix sort works. Where does your proof need the
assumption that the intermediate sort is stable?

8.3-4
Show how to sort integers in the range 0 to n> — 1 in O(n) time.

83-5 &

In the first card-sorting algorithm in this section, exactly how many sorting passes
are needed to sort d-digit decimal numbers in the worst case? How many piles of
cards would an operator need to keep track of in the worst case?

 

8.4 Bucket sort

Bucket sort assumes that the input is drawn from a uniform distribution and has an
average-case running time of O(). Like counting sort, bucket sort is fast because
it assumes something about the input. Whereas counting sort assumes that the input
consists of integers in a small range, bucket sort assumes that the input is generated
by a random process that distributes elements uniformly and independently over
the interval [0, 1). (See Section C.2 for a definition of uniform distribution.)

Bucket sort divides the interval [0, 1) into n equal-sized subintervals, or buckets,
and then distributes the 7 input numbers into the buckets. Since the inputs are uni-
formly and independently distributed over [0, 1), we do not expect many numbers
to fall into each bucket. To produce the output, we simply sort the numbers in each
bucket and then go through the buckets in order, listing the elements in each.

Our code for bucket sort assumes that the input is an n-element array A and
that each element A[i] in the array satisfies 0 < A[i] < 1. The code requires an
auxiliary array B[0..n — 1] of linked lists (buckets) and assumes that there is a
mechanism for maintaining such lists. (Section 10.2 describes how to implement
basic operations on linked lists.)
