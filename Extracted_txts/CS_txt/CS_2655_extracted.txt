Part I Data Structures 231

In some situations, we can extend the queries SUCCESSOR and PREDECESSOR
so that they apply to sets with nondistinct keys. For a set on n keys, the normal
presumption is that a call to MINIMUM followed by 1 — | calls to SUCCESSOR
enumerates the elements in the set in sorted order.

We usually measure the time taken to execute a set operation in terms of the size
of the set. For example, Chapter 13 describes a data structure that can support any
of the operations listed above on a set of size n in time O(lg7).

Overview of Part III

Chapters 10-14 describe several data structures that we can use to implement
dynamic sets; we shall use many of these later to construct efficient algorithms
for a variety of problems. We already saw another important data structure—the
heap—in Chapter 6.

Chapter 10 presents the essentials of working with simple data structures such
as stacks, queues, linked lists, and rooted trees. It also shows how to implement
objects and pointers in programming environments that do not support them as
primitives. If you have taken an introductory programming course, then much of
this material should be familiar to you.

Chapter 11 introduces hash tables, which support the dictionary operations IN-
SERT, DELETE, and SEARCH. In the worst case, hashing requires (7) time to per-
form a SEARCH operation, but the expected time for hash-table operations is O(1).
The analysis of hashing relies on probability, but most of the chapter requires no
background in the subject.

Binary search trees, which are covered in Chapter 12, support all the dynamic-
set operations listed above. In the worst case, each operation takes @(n) time on a
tree with n elements, but on a randomly built binary search tree, the expected time
for each operation is O(lg). Binary search trees serve as the basis for many other
data structures.

Chapter 13 introduces red-black trees, which are a variant of binary search trees.
Unlike ordinary binary search trees, red-black trees are guaranteed to perform well:
operations take O(Ig 7) time in the worst case. A red-black tree is a balanced search
tree; Chapter 18 in Part V presents another kind of balanced search tree, called a
B-tree. Although the mechanics of red-black trees are somewhat intricate, you can
glean most of their properties from the chapter without studying the mechanics in
detail. Nevertheless, you probably will find walking through the code to be quite
instructive.

In Chapter 14, we show how to augment red-black trees to support operations
other than the basic ones listed above. First, we augment them so that we can
dynamically maintain order statistics for a set of keys. Then, we augment them in
a different way to maintain intervals of real numbers.
