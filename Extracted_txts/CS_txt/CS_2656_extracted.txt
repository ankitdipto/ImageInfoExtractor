10

Elementary Data Structures

In this chapter, we examine the representation of dynamic sets by simple data struc-
tures that use pointers. Although we can construct many complex data structures
using pointers, we present only the rudimentary ones: stacks, queues, linked lists,
and rooted trees. We also show ways to synthesize objects and pointers from ar-
rays.

 

10.1 Stacks and queues

Stacks and queues are dynamic sets in which the element removed from the set
by the DELETE operation is prespecified. In a stack, the element deleted from
the set is the one most recently inserted: the stack implements a Jast-in, first-out,
or LIFO, policy. Similarly, in a queue, the element deleted is always the one that
has been in the set for the longest time: the queue implements a first-in, first-out,
or FIFO, policy. There are several efficient ways to implement stacks and queues
on a computer. In this section we show how to use a simple array to implement
each.

Stacks

The INSERT operation on a stack is often called PUSH, and the DELETE opera-
tion, which does not take an element argument, is often called Pop. These names
are allusions to physical stacks, such as the spring-loaded stacks of plates used
in cafeterias. The order in which plates are popped from the stack is the reverse
of the order in which they were pushed onto the stack, since only the top plate is
accessible.

As Figure 10.1 shows, we can implement a stack of at most 7 elements with
an array S[1..‚Äù]. The array has an attribute S. top that indexes the most recently
