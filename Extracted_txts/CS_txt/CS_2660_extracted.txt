10.1 Stacks and queues 235

When Q.head = Q.tail + 1, the queue is full, and if we attempt to enqueue an
element, then the queue overflows.

In our procedures ENQUEUE and DEQUEUE, we have omitted the error checking
for underflow and overflow. (Exercise 10.1-4 asks you to supply code that checks
for these two error conditions.) The pseudocode assumes that 1 = Q.length.

ENQUEUE(Q, x)

 

1 Q[Q.tail] = x

2. if Q.tail == Q.length

3 Q.tail = 1

4 else QO. tail = Q.tail+1

DEQUEUE(Q)

1 x = QO[Q.head]

2. if O.head == Q. length

3 Q.head = 1

4 else O. head = Q.head +1
5 return x

Figure 10.2 shows the effects of the ENQUEUE and DEQUEUE operations. Each
operation takes O(1) time.

Exercises

10.1-1

Using Figure 10.1 as a model, illustrate the result of each operation in the sequence
Pusu(S,4), PusH(S,1), PusH(S,3), Pop(S), PusH(S,8), and Pop(S) on an
initially empty stack S stored in array S[1.. 6].

10.1-2

Explain how to implement two stacks in one array A[l../] in such a way that
neither stack overflows unless the total number of elements in both stacks together
is n. The PUSH and Pop operations should run in O(1) time.

10.1-3

Using Figure 10.2 as a model, illustrate the result of each operation in the
sequence ENQUEUE(Q,4), ENQUEUE(Q, 1), ENQUEUE(Q,3), DEQUEUE(Q),
ENQUEUE(Q,8), and DEQUEUE(Q) on an initially empty queue Q stored in
array O[1..6].

10.1-4
Rewrite ENQUEUE and DEQUEUE to detect underflow and overflow of a queue.
