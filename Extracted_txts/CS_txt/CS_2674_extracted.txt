246

Chapter 10 Elementary Data Structures

 

10.4 Representing rooted trees

The methods for representing lists given in the previous section extend to any ho-
mogeneous data structure. In this section, we look specifically at the problem of
representing rooted trees by linked data structures. We first look at binary trees,
and then we present a method for rooted trees in which nodes can have an arbitrary
number of children.

We represent each node of a tree by an object. As with linked lists, we assume
that each node contains a key attribute. The remaining attributes of interest are
pointers to other nodes, and they vary according to the type of tree.

Binary trees

Figure 10.9 shows how we use the attributes p, /eft, and right to store pointers to
the parent, left child, and right child of each node in a binary tree T. If x.p = NIL,
then x is the root. If node x has no left child, then x./eft = NIL, and similarly for
the right child. The root of the entire tree T is pointed to by the attribute 7. root. If
T.root = NIL, then the tree is empty.

Rooted trees with unbounded branching

We can extend the scheme for representing a binary tree to any class of trees in
which the number of children of each node is at most some constant k: we replace
the /eft and right attributes by child,, child,..., child,. This scheme no longer
works when the number of children of a node is unbounded, since we do not know
how many attributes (arrays in the multiple-array representation) to allocate in ad-
vance. Moreover, even if the number of children k is bounded by a large constant
but most nodes have a small number of children, we may waste a lot of memory.

Fortunately, there is a clever scheme to represent trees with arbitrary numbers of
children. It has the advantage of using only O(7) space for any n-node rooted tree.
The left-child, right-sibling representation appears in Figure 10.10. As before,
each node contains a parent pointer p, and T.root points to the root of tree T.
Instead of having a pointer to each of its children, however, each node x has only
two pointers:

1. x./eft-child points to the leftmost child of node x, and
2. x.right-sibling points to the sibling of x immediately to its right.

If node x has no children, then x./eft-child = NIL, and if node x is the rightmost
child of its parent, then x.right-sibling = NIL.
