252

Chapter 10 Elementary Data Structures

b. Argue that the expected running time of CoMPACT-LIST-SEARCH (L,n,k,t)
is Ot + E[X;]).

c. Show that E[X;] < )9’_,(1 —r/n)'. (Hint: Use equation (C.25).)
d. Show that 2p r! <n't!/(¢ +1).
e. Prove that E [X,] < n/(t + 1).

f Show that Compact-LisT-SEARCH (L,n,k,t) runs in O(t + n/t) expected
time.

g. Conclude that COMPACT-LIST-SEARCH runs in O(/7) expected time.

h. Why do we assume that all keys are distinct in COMPACT-LIST-SEARCH? Ar-
gue that random skips do not necessarily help asymptotically when the list con-
tains repeated key values.

 

Chapter notes

Aho, Hopcroft, and Ullman [6] and Knuth [209] are excellent references for ele-
mentary data structures. Many other texts cover both basic data structures and their
implementation in a particular programming language. Examples of these types of
textbooks include Goodrich and Tamassia [147], Main [241], Shaffer [311], and
Weiss [352, 353, 354]. Gonnet [145] provides experimental data on the perfor-
mance of many data-structure operations.

The origin of stacks and queues as data structures in computer science is un-
clear, since corresponding notions already existed in mathematics and paper-based
business practices before the introduction of digital computers. Knuth [209] cites
A. M. Turing for the development of stacks for subroutine linkage in 1947.

Pointer-based data structures also seem to be a folk invention. According to
Knuth, pointers were apparently used in early computers with drum memories. The
A-1 language developed by G. M. Hopper in 1951 represented algebraic formulas
as binary trees. Knuth credits the IPL-II language, developed in 1956 by A. Newell,
J.C. Shaw, and H. A. Simon, for recognizing the importance and promoting the
use of pointers. Their IPL-III language, developed in 1957, included explicit stack
operations.
