260

Chapter 11 Hash Tables

appear before x in x’s list. Because new elements are placed at the front of the
list, elements before x in the list were all inserted after x was inserted. To find
the expected number of elements examined, we take the average, over the 7 ele-
ments x in the table, of 1 plus the expected number of elements added to x’s list
after x was added to the list. Let x; denote the ith element inserted into the ta-
ble, fori = 1,2,....n, and let kj = x;.key. For keys k; and kj, we define the
indicator random variable X;; = I {h(k;) = h(k;)}. Under the assumption of sim-
ple uniform hashing, we have Pr {h(k;) = h(k;)} = 1/m, and so by Lemma 5.1,
E[X;;] = 1/m. Thus, the expected number of elements examined in a successful
search is

eid ( > x)|

jit]

    

n

1
=- E[Xi; by li ity of ctati
i > (: + >» [ i) (by linearity of expectation)

j=it

“12-5

j=itl

Le
= 14— -i
+i de i)

= 14+ = Ge = oP) (by equation (A.1))
1

 

nm 2
n—
= 1
+ 2m
= 14% 8
2 2n°
Thus, the total time required for a successful search (including the time for com-
puting the hash function) is ©(2 + «/2—a@/2n) = O(1 +a). .

What does this analysis mean? If the number of hash-table slots is at least pro-
portional to the number of elements in the table, we have n = O(m) and, con-
sequently, @ = n/m = O(m)/m = O(1). Thus, searching takes constant time
on average. Since insertion takes O(1) worst-case time and deletion takes O(1)
worst-case time when the lists are doubly linked, we can support all dictionary
operations in O(1) time on average.
