11.2 Hash tables 261

Exercises

112-1

Suppose we use a hash function / to hash n distinct keys into an array T of
length m. Assuming simple uniform hashing, what is the expected number of
collisions? More precisely, what is the expected cardinality of {{k,/} +k #1 and
h(k) =h()}?

11.2-2

Demonstrate what happens when we insert the keys 5, 28, 19, 15,20, 33, 12,17, 10
into a hash table with collisions resolved by chaining. Let the table have 9 slots,
and let the hash function be h(k) = k mod 9.

11.2-3

Professor Marley hypothesizes that he can obtain substantial performance gains by
modifying the chaining scheme to keep each list in sorted order. How does the pro-
fessor’s modification affect the running time for successful searches, unsuccessful
searches, insertions, and deletions?

I1.2-4

Suggest how to allocate and deallocate storage for elements within the hash table
itself by linking all unused slots into a free list. Assume that one slot can store
a flag and either one element plus a pointer or two pointers. All dictionary and
free-list operations should run in O(1) expected time. Does the free list need to be
doubly linked, or does a singly linked free list suffice?

11.2-5

Suppose that we are storing a set of n keys into a hash table of size m. Show that if
the keys are drawn from a universe U with |U| > nm, then U has a subset of size n
consisting of keys that all hash to the same slot, so that the worst-case searching
time for hashing with chaining is ©(7).

11.2-6

Suppose we have stored 7 keys in a hash table of size m, with collisions resolved by
chaining, and that we know the length of each chain, including the length L of the
longest chain. Describe a procedure that selects a key uniformly at random from
among the keys in the hash table and returns it in expected time O(L - (1 + 1/a)).
