11.5 Perfect hashing 277

Exercises

114-1

Consider inserting the keys 10,22, 31,4, 15,28, 17,88,59 into a hash table of
length m = 11 using open addressing with the auxiliary hash function h'(k) = k.
Illustrate the result of inserting these keys using linear probing, using quadratic
probing with c,; = 1 and c, = 3, and using double hashing with h,(k) = k and
hy(k) = 1+ (k mod (m— 1)).

11.4-2
Write pseudocode for HASH-DELETE as outlined in the text, and modify HASH-
INSERT to handle the special value DELETED.

114-3
Consider an open-address hash table with uniform hashing. Give upper bounds
on the expected number of probes in an unsuccessful search and on the expected
number of probes in a successful search when the load factor is 3/4 and when it
is 7/8.

114-4 x

Suppose that we use double hashing to resolve collisions—that is, we use the hash
function h(k,i) = (4, (k) + ih2(k)) modm. Show that if m and h2(k) have
greatest common divisor d > | for some key k, then an unsuccessful search for
key k examines (1/d)th of the hash table before returning to slot /1,(k). Thus,
when d = 1, so that m and h(k) are relatively prime, the search may examine the
entire hash table. (Hint: See Chapter 31.)

I14-5 x

Consider an open-address hash table with a load factor w. Find the nonzero value a
for which the expected number of probes in an unsuccessful search equals twice
the expected number of probes in a successful search. Use the upper bounds given
by Theorems 11.6 and 11.8 for these expected numbers of probes.

 

* 11.5 Perfect hashing

Although hashing is often a good choice for its excellent average-case perfor-
mance, hashing can also provide excellent worst-case performance when the set of
keys is static: once the keys are stored in the table, the set of keys never changes.
Some applications naturally have static sets of keys: consider the set of reserved
words in a programming language, or the set of file names on a CD-ROM. We
