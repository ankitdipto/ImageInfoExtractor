12.2 Querying a binary search tree 293

Exercises

12.2-1

Suppose that we have numbers between | and 1000 in a binary search tree, and we
want to search for the number 363. Which of the following sequences could not be
the sequence of nodes examined?

a. 2, 252, 401, 398, 330, 344, 397, 363.

b. 924, 220, 911, 244, 898, 258, 362, 363.

c. 925, 202, 911, 240, 912, 245, 363.

d. 2, 399, 387, 219, 266, 382, 381, 278, 363.

e. 935, 278, 347, 621, 299, 392, 358, 363.

12.2-2
Write recursive versions of TREE-MINIMUM and TREE-MAXIMUM.

12.2-3
Write the TREE-PREDECESSOR procedure.

12.2-4

Professor Bunyan thinks he has discovered a remarkable property of binary search
trees. Suppose that the search for key k in a binary search tree ends up in a leaf.
Consider three sets: A, the keys to the left of the search path; B, the keys on the
search path; and C, the keys to the right of the search path. Professor Bunyan
claims that any three keys a € A,b € B,andc € C must satisfy a < b <c. Give
a smallest possible counterexample to the professor’s claim.

12.2-5
Show that if a node in a binary search tree has two children, then its successor has
no left child and its predecessor has no right child.

12.2-6

Consider a binary search tree T whose keys are distinct. Show that if the right
subtree of a node x in T is empty and x has a successor y, then y is the lowest
ancestor of x whose left child is also an ancestor of x. (Recall that every node is
its own ancestor.)

12.2-7

An alternative method of performing an inorder tree walk of an n-node binary
search tree finds the minimum element in the tree by calling TREE-MINIMUM and
then making n — | calls to TREE-SUCCESSOR. Prove that this algorithm runs
in O(n) time.
