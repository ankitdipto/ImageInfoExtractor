12.4 Randomly built binary search trees 299

Exercises

12.3-1
Give a recursive version of the TREE-INSERT procedure.

12.3-2

Suppose that we construct a binary search tree by repeatedly inserting distinct val-
ues into the tree. Argue that the number of nodes examined in searching for a
value in the tree is one plus the number of nodes examined when the value was
first inserted into the tree.

12.3-3

We can sort a given set of 7 numbers by first building a binary search tree contain-
ing these numbers (using TREE-INSERT repeatedly to insert the numbers one by
one) and then printing the numbers by an inorder tree walk. What are the worst-
case and best-case running times for this sorting algorithm?

12.3-4

Is the operation of deletion “commutative” in the sense that deleting x and then y
from a binary search tree leaves the same tree as deleting y and then x? Argue why
it is or give a counterexample.

12.3-5

Suppose that instead of each node x keeping the attribute x.p, pointing to x’s
parent, it keeps x.succ, pointing to x’s successor. Give pseudocode for SEARCH,
INSERT, and DELETE on a binary search tree T using this representation. These
procedures should operate in time O(h), where / is the height of the tree T. (Hint:
You may wish to implement a subroutine that returns the parent of a node.)

12.3-6

When node z in TREE-DELETE has two children, we could choose node y as
its predecessor rather than its successor. What other changes to TREE-DELETE
would be necessary if we did so? Some have argued that a fair strategy, giving
equal priority to predecessor and successor, yields better empirical performance.
How might TREE-DELETE be changed to implement such a fair strategy?

 

* 12.4 Randomly built binary search trees

We have shown that each of the basic operations on a binary search tree runs
in O(h) time, where h is the height of the tree. The height of a binary search
