13

Red-Black Trees

Chapter 12 showed that a binary search tree of height / can support any of the basic
dynamic-set operations—such as SEARCH, PREDECESSOR, SUCCESSOR, MINI-
MUM, MAXIMUM, INSERT, and DELETE—in O(h) time. Thus, the set operations
are fast if the height of the search tree is small. If its height is large, however, the
set operations may run no faster than with a linked list. Red-black trees are one
of many search-tree schemes that are “balanced” in order to guarantee that basic
dynamic-set operations take O(lg 7) time in the worst case.

 

13.1 Properties of red-black trees

A red-black tree is a binary search tree with one extra bit of storage per node: its
color, which can be either RED or BLACK. By constraining the node colors on any
simple path from the root to a leaf, red-black trees ensure that no such path is more
than twice as long as any other, so that the tree is approximately balanced.

Each node of the tree now contains the attributes color, key, left, right, and p. If
a child or the parent of a node does not exist, the corresponding pointer attribute
of the node contains the value NIL. We shall regard these NILs as being pointers to
leaves (external nodes) of the binary search tree and the normal, key-bearing nodes
as being internal nodes of the tree.

Ared-black tree is a binary tree that satisfies the following red-black properties:

Every node is either red or black.

The root is black.

Every leaf (NIL) is black.

If a node is red, then both its children are black.

vk ey

For each node, all simple paths from the node to descendant leaves contain the
same number of black nodes.
