322

Chapter 13 Red-Black Trees

Having shown that each iteration of the loop maintains the invariant, we have
shown that RB-INSERT-FIXUP correctly restores the red-black properties.

Analysis

What is the running time of RB-INSERT? Since the height of a red-black tree on n
nodes is O(lgi), lines 1-16 of RB-INSERT take O(lg7) time. In RB-INSERT-
Fixup, the while loop repeats only if case 1 occurs, and then the pointer z moves
two levels up the tree. The total number of times the while loop can be executed
is therefore O(lgn). Thus, RB-INSERT takes a total of O(Ig 7) time. Moreover, it
never performs more than two rotations, since the while loop terminates if case 2
or case 3 is executed.

Exercises

13.3-1

In line 16 of RB-INSERT, we set the color of the newly inserted node z to red.
Observe that if we had chosen to set z’s color to black, then property 4 of a red-
black tree would not be violated. Why didn’t we choose to set z’s color to black?

13.3-2
Show the red-black trees that result after successively inserting the keys 41, 38, 31,
12, 19, 8 into an initially empty red-black tree.

13.3-3

Suppose that the black-height of each of the subtrees a, B, y,5,¢ in Figures 13.5
and 13.6 is k. Label each node in each figure with its black-height to verify that
the indicated transformation preserves property 5.

13.34

Professor Teach is concerned that RB-INSERT-FIXUP might set T.nil.color to
RED, in which case the test in line 1 would not cause the loop to terminate when z
is the root. Show that the professor’s concern is unfounded by arguing that RB-
INSERT-FIXUP never sets T.nil.color to RED.

13.3-5
Consider a red-black tree formed by inserting n nodes with RB-INSERT. Argue
that ifn > 1, the tree has at least one red node.

13.3-6
Suggest how to implement RB-INSERT efficiently if the representation for red-
black trees includes no storage for parent pointers.
