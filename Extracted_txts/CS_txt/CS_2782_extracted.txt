Problems for Chapter 13 333

e. Argue that no generality is lost by making the assumption in part (b). Describe
the symmetric situation that arises when 7 .bh < Tz.bh.

f. Argue that the running time of RB-JOIN is O(lgn).

13-3 AVL trees

An AVL tree is a binary search tree that is height balanced: for each node x, the
heights of the left and right subtrees of x differ by at most 1. To implement an AVL
tree, we maintain an extra attribute in each node: x.h is the height of node x. As
for any other binary search tree T, we assume that T. root points to the root node.

a. Prove that an AVL tree with n nodes has height O(lgm). (Hint: Prove that
an AVL tree of height / has at least Fj, nodes, where Fj is the th Fibonacci
number.)

b. To insert into an AVL tree, we first place a node into the appropriate place in bi-
nary search tree order. Afterward, the tree might no longer be height balanced.
Specifically, the heights of the left and right children of some node might differ
by 2. Describe a procedure BALANCE(x), which takes a subtree rooted at x
whose left and right children are height balanced and have heights that differ
by at most 2, i.e., |x.right.h â€” x.left.h| < 2, and alters the subtree rooted at x
to be height balanced. (Hint: Use rotations.)

c. Using part (b), describe a recursive procedure AVL-INSERT(x,Z) that takes
anode x within an AVL tree and a newly created node z (whose key has al-
ready been filled in), and adds z to the subtree rooted at x, maintaining the
property that x is the root of an AVL tree. As in TREE-INSERT from Sec-
tion 12.3, assume that z. key has already been filled in and that z.leff = NIL
and z.right = NIL; also assume that z. = 0. Thus, to insert the node z into
the AVL tree T, we call AVL-INSERT(T. root, z).

d. Show that AVL-INSERT, run on an -node AVL tree, takes O(lg7) time and
performs O(1) rotations.

13-4 Treaps
If we insert a set of n items into a binary search tree, the resulting tree may be
horribly unbalanced, leading to long search times. As we saw in Section 12.4,
however, randomly built binary search trees tend to be balanced. Therefore, one
strategy that, on average, builds a balanced tree for a fixed set of items would be to
randomly permute the items and then insert them in that order into the tree.

What if we do not have all the items at once? If we receive the items one at a
time, can we still randomly build a binary search tree out of them?
