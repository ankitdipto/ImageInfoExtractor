15.1 Rod cutting 369

EXTENDED-BOTTOM-UP-CuT-RoD(p, 1)
1 let r[0..n] and s[0..n] be new arrays

 

4

5 ltoj

6 ifg < pli}]+rlj -i]

7 4 = pli)+rli - 1]
8 sli] =i

9 rll =4

0 return r and s

This procedure is similar to BOTTOM-Up-CuT-ROoD, except that it creates the ar-
ray sin line 1, and it updates s[j] in line 8 to hold the optimal size i of the first
piece to cut off when solving a subproblem of size j.

The following procedure takes a price table p and a rod size n, and it calls
EXTENDED-BOTTOM-UP-CuT-ROD to compute the array s[1..n] of optimal
first-piece sizes and then prints out the complete list of piece sizes in an optimal
decomposition of a rod of length n:

PRINT-CUT-ROD-SOLUTION (p, 11)

1 (r,s) = EXTENDED-BOTTOM-UP-CUT-ROD (p, 7)
2 while n > 0

3 print s[7]

4

n=n-â€”sj[n]

In our rod-cutting example, the call EXTENDED-BOTTOM-UP-CuT-Rop (p, 10)
would return the following arrays:

i|0O123 4 5 67 8 9 10
015 8 10 13 17 18 22 25 30
si]|0 123 2 2 6 1 2 3 10

 

A call to PRINT-CUT-ROD-SOLUTION(p, 10) would print just 10, but a call with
n = 7 would print the cuts | and 6, corresponding to the first optimal decomposi-
tion for r7 given earlier.

Exercises

15.1-1
Show that equation (15.4) follows from equation (15.3) and the initial condition
T(0) =1.
