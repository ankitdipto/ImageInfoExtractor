378

Chapter 15 Dynamic Programming

Exercises

15.2-1
Find an optimal parenthesization of a matrix-chain product whose sequence of
dimensions is (5, 10,3, 12,5, 50,6).

15.2-2

Give a recursive algorithm MATRIX-CHAIN-MULTIPLY(A,5,i, j) that actually
performs the optimal matrix-chain multiplication, given the sequence of matrices
(Aj, Ao... An), the s table computed by MATRIX-CHAIN-ORDER, and the in-
dices i and j. (The initial call would be MATRIX-CHAIN-MULTIPLY (A, 5, 1, 72).)

15.2-3
Use the substitution method to show that the solution to the recurrence (15.6)
is Q(2”).

15.24

Describe the subproblem graph for matrix-chain multiplication with an input chain
of length n. How many vertices does it have? How many edges does it have, and
which edges are they?

15.2-5

Let R(i, j) be the number of times that table entry m[i, j] is referenced while
computing other table entries in a call of MATRIX-CHAIN-ORDER. Show that the
total number of references for the entire table is

VV RGD =

i=l j=i

3

      

 

n

(Hint: You may find equation (A.3) useful.)

15.26
Show that a full parenthesization of an n-element expression has exactly n —1 pairs
of parentheses.

 

15.3. Elements of dynamic programming

Although we have just worked through two examples of the dynamic-programming
method, you might still be wondering just when the method applies. From an en-
gineering perspective, when should we look for a dynamic-programming solution
to a problem? In this section, we examine the two key ingredients that an opti-
