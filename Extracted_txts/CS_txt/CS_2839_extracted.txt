380

Chapter 15 Dynamic Programming

solution gives rise to more than one subproblem, they are typically so similar
that you can modify the cut-and-paste argument for one to apply to the others
with little effort.

To characterize the space of subproblems, a good rule of thumb says to try to
keep the space as simple as possible and then expand it as necessary. For example,
the space of subproblems that we considered for the rod-cutting problem contained
the problems of optimally cutting up a rod of length i for each size i. This sub-
problem space worked well, and we had no need to try a more general space of
subproblems.

Conversely, suppose that we had tried to constrain our subproblem space for
matrix-chain multiplication to matrix products of the form A;A2--- A;. As before,
an optimal parenthesization must split this product between Ax and Ag+, for some
1 <k < j. Unless we could guarantee that k always equals j — 1, we would find
that we had subproblems of the form A; A2--+ Ag and Ag+1Ax+42 ++ Aj, and that
the latter subproblem is not of the form A; A2 --- Aj. For this problem, we needed
to allow our subproblems to vary at “both ends,” that is, to allow both i and j to
vary in the subproblem A; A;+1--- Aj.

Optimal substructure varies across problem domains in two ways:

 

1. how many subproblems an optimal solution to the original problem uses, and

2. how many choices we have in determining which subproblem(s) to use in an
optimal solution.

In the rod-cutting problem, an optimal solution for cutting up a rod of size n
uses just one subproblem (of size n — i), but we must consider n choices for i
in order to determine which one yields an optimal solution. Matrix-chain mul-
tiplication for the subchain A;Aj+;---Aj serves as an example with two sub-
problems and j —i choices. For a given matrix Ax at which we split the prod-
uct, we have two subproblems—parenthesizing A; Aj+;--- Ag and parenthesizing
Ax+1 A+++: Aj—and we must solve both of them optimally. Once we determine
the optimal solutions to subproblems, we choose from among j —i candidates for
the index k.

Informally, the running time of a dynamic-programming algorithm depends on
the product of two factors: the number of subproblems overall and how many
choices we look at for each subproblem. In rod cutting, we had ©(7) subproblems
overall, and at most 7 choices to examine for each, yielding an O(n?) running time.
Matrix-chain multiplication had @(n?) subproblems overall, and in each we had at
most n — | choices, giving an O(n) running time (actually, a @(73) running time,
by Exercise 15.2-5).

Usually, the subproblem graph gives an alternative way to perform the same
analysis. Each vertex corresponds to a subproblem, and the choices for a sub-
