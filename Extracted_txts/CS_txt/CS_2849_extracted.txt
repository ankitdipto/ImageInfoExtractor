94 — cuarrer FOUR Register Transfer and Microoperations

register transfer
language

operations increment and load. A bidirectional shift register is capable of
performing the shift right and shift left microoperations.
The internal hardware organization of a digital computer is best defined

by specifying:

1. The set of registers it contains and their function.

2. The sequence of microoperations performed on the binary information
stored in the registers.

3, The control that initiates the sequence of microoperations.

It is possible to specify the sequence of microoperations in a computer by
explaining every operation in words, but this procedure usually involves a
lengthy descriptive explanation. It is more convenient to adopt a suitable
symbology to describe the sequence of transfers between registers and the
various arithmeticand logic microoperations associated with the transfers. The
use of symbols instead of a narrative explanation provides an organized and
concise manner for listing the microoperation sequences in registers and the
control functions that initiate them.

The symbolic notation used to describe the microoperation transfers
among registers is called a register transfer language. The term “register
transfer” implies the availability of hardware logic circuits that can perform a
stated microoperation and transfer the result of the operation to the same or
another register. The word “language” is borrowed from programmers, who
apply this term to programming languages. A programming language is a
procedure for writing symbols to specify a given computational process. Sim-
ilarly, a natural language such as English is a system for writing symbols and
combining them into words and sentences for the purpose of communication
between people. A register transfer language is a system for expressing in
symbolic form the microoperation sequences among the registers of a digital
module. Itis a convenient tool for describing the internal organization of digital
computers in concise and precise manner. It can also be used to facilitate the
design process of digital systems.

The register transfer language adopted here is believed to be as simple
as possible, so it should not take very long to memorize. We will proceed to
define symbols for various types of microoperations, and at the same time,
describe associated hardware that can implement the stated microoperations.
The symbolic designation introduced in this chapter will be utilized in subse-
quent chapters to specify the register transfers, the microoperations, and the
control functions that describe the internal hardware organization of digital
computers. Other symbology in use can easily be learned once this language
has become familiar, for most of the differences between register transfer
languages consist of variations in detail rather than in overall purpose.
