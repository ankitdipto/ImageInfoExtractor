24.3 Dijkstra’s algorithm 663

24,3-2

Give a simple example of a directed graph with negative-weight edges for which
Dijkstra’s algorithm produces incorrect answers. Why doesn’t the proof of Theo-
rem 24.6 go through when negative-weight edges are allowed?

24,3-3
Suppose we change line 4 of Dijkstra’s algorithm to the following.

4 while |Q|>1

This change causes the while loop to execute |V’| — | times instead of |V| times. Is
this proposed algorithm correct?

24,3-4

Professor Gaedel has written a program that he claims implements Dijkstra’s al-
gorithm. The program produces v.d and v.z for each vertex v € V. Give an
OV + E)-time algorithm to check the output of the professor’s program. It should
determine whether the d and z attributes match those of some shortest-paths tree.
You may assume that all edge weights are nonnegative.

243-5

Professor Newman thinks that he has worked out a simpler proof of correctness
for Dijkstra’s algorithm. He claims that Dijkstra’s algorithm relaxes the edges of
every shortest path in the graph in the order in which they appear on the path, and
therefore the path-relaxation property applies to every vertex reachable from the
source. Show that the professor is mistaken by constructing a directed graph for
which Dijkstra’s algorithm could relax the edges of a shortest path out of order.

243-6

We are given a directed graph G = (V, E) on which each edge (u,v) € E has an
associated value (u,v), which is a real number in the range 0 < r(u,v) < 1 that
represents the reliability of a communication channel from vertex u to vertex v.
We interpret r(w,v) as the probability that the channel from u to v will not fail,
and we assume that these probabilities are independent. Give an efficient algorithm
to find the most reliable path between two given vertices.

24,3-7
Let G = (V,E) be a weighted, directed graph with positive weight function
w:iE > {1,2,..., W} for some positive integer W, and assume that no two ver-

tices have the same shortest-path weights from source vertex s. Now suppose that
we define an unweighted, directed graph G’ = (V U V’, E’) by replacing each
edge (u,v) € E with w(u,v) unit-weight edges in series. How many vertices
does G’ have? Now suppose that we run a breadth-first search on G’. Show that
