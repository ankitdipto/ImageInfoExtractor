432

(©)

(e)

Chapter 16 Greedy Algorithms

 

a)

 

 

 

 

 

e:9 | [c:12] [b:13] [d:16] [a:45 (b)  [e:12] [b:13 16) [a:45

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

:16| a:45 (d) ads

 

 

o
o

 

 

 

 

 

¢:12] [b:13 ¢:12] [b:13

 

 

 

 

 

 

 

 

 

 

 

 

a:45

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Figure 16.5. The steps of Huffman’s algorithm for the frequencies given in Figure 16.3. Each part
shows the contents of the queue sorted into increasing order by frequency. At each step, the two
trees with lowest frequencies are merged. Leaves are shown as rectangles containing a character
and its frequency. Internal nodes are shown as circles containing the sum of the frequencies of their
children, An edge connecting an internal node with its children is labeled 0 if it is an edge to a left
child and 1 if itis an edge to a right child. The codeword for a letter is the sequence of labels on the
edges connecting the root to the leaf for that letter. (a) The initial set of n = 6 nodes, one for each
letter. (b)-(e) Intermediate stages. (f) The final tree.

from the queue, replacing them in the queue with a new node z representing their
merger. The frequency of z is computed as the sum of the frequencies of x and y
in line 7. The node z has x as its left child and y as its right child. (This order is
arbitrary; switching the left and right child of any node yields a different code of
the same cost.) After  — | mergers, line 9 returns the one node left in the queue,
which is the root of the code tree.

Although the algorithm would produce the same result if we were to excise the
variables x and y—assigning directly to z.left and z.right in lines 5 and 6, and
changing line 7 to z.freq = Z.left.freq + z.right.freq—we shall use the node
