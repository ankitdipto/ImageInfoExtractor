436

Chapter 16 Greedy Algorithms

Exercises

16.3-1
Explain why, in the proof of Lemma 16.2, if x.freqg = b.freq, then we must have
a. freq = b. freq = x. freq = y.freq.

16.3-2
Prove that a binary tree that is not full cannot correspond to an optimal prefix code.

16.3-3
What is an optimal Huffman code for the following set of frequencies, based on
the first 8 Fibonacci numbers?

a:l b:l c:2 d:3 e:5 £:8 g:13 h:21

Can you generalize your answer to find the optimal code when the frequencies are
the first 1 Fibonacci numbers?

163-4
Prove that we can also express the total cost of a tree for a code as the sum, over
all internal nodes, of the combined frequencies of the two children of the node.

163-5

Prove that if we order the characters in an alphabet so that their frequencies
are monotonically decreasing, then there exists an optimal code whose codeword
lengths are monotonically increasing.

16.3-6

Suppose we have an optimal prefix code on a set C = {0,1,..., n — 1} of charac-
ters and we wish to transmit this code using as few bits as possible. Show how to
represent any optimal prefix code on C using only 2n — 1 + n [lgn] bits. (Hint:
Use 2n — | bits to specify the structure of the tree, as discovered by a walk of the
tree.)

163-7
Generalize Huffman’s algorithm to ternary codewords (i.e., codewords using the
symbols 0, 1, and 2), and prove that it yields optimal ternary codes.

16.3-8

Suppose that a data file contains a sequence of 8-bit characters such that all 256
characters are about equally common: the maximum character frequency is less
than twice the minimum character frequency. Prove that Huffman coding in this
case is no more efficient than using an ordinary 8-bit fixed-length code.
