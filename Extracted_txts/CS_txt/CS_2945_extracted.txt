17.4 Dynamic tables 467

32

 

num;

 

24

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Figure 17.3 The effect of a sequence of n TABLE-INSERT operations on the number num; of items
in the table, the number size; of slots in the table, and the potential @; = 2- num; — size;, each
being measured after the ith operation. The thin line shows numj;, the dashed line shows size; , and
the thick line shows ;. Notice that immediately before an expansion, the potential has built up to
the number of items in the table, and therefore it can pay for moving all the items to the new table.
Afterwards, the potential drops to 0, but it is immediately increased by 2 upon inserting the item that
caused the expansion.

 

Figure 17.3 plots the values of num;,, size;, and ®; against i. Notice how the
potential builds to pay for expanding the table.

17.4.2 Table expansion and contraction

To implement a TABLE-DELETE operation, it is simple enough to remove the spec-
ified item from the table. In order to limit the amount of wasted space, however,
we might wish to contract the table when the load factor becomes too small. Table
contraction is analogous to table expansion: when the number of items in the table
drops too low, we allocate a new, smaller table and then copy the items from the
old table into the new one. We can then free the storage for the old table by return-
ing it to the memory-management system. Ideally, we would like to preserve two
properties:

* the load factor of the dynamic table is bounded below by a positive constant,
and

* the amortized cost of a table operation is bounded above by a constant.
