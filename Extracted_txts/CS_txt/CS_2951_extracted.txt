17.4 Dynamic tables 471

If aj, < 1/2 and the ith operation does trigger a contraction, then the actual cost
of the operation is c; = num; + 1, since we delete one item and move num; items.

We have size;/2 = size;-1/4 = numj;—, = num; + 1, and the amortized cost of
the operation is
G = G +O -O4

(num; + 1) + (size; /2 — num;) — (size; /2 — num;—1)
= (num; +1) + (num; + 1) — num) — (2 - num; + 2) — (num; + 1))
= 1.

When the ith operation is a TABLE-DELETE and @;_, > 1/2, the amortized cost
is also bounded above by a constant. We leave the analysis as Exercise 17.4-2.

In summary, since the amortized cost of each operation is bounded above by
a constant, the actual time for any sequence of n operations on a dynamic table
is O(n).

Exercises

174-1

Suppose that we wish to implement a dynamic, open-address hash table. Why
might we consider the table to be full when its load factor reaches some value a
that is strictly less than 1? Describe briefly how to make insertion into a dynamic,
open-address hash table run in such a way that the expected value of the amortized
cost per insertion is O(1). Why is the expected value of the actual cost per insertion
not necessarily O(1) for all insertions?

174-2

Show that if @;_; > 1/2 and the ith operation on a dynamic table is TABLE-
DELETE, then the amortized cost of the operation with respect to the potential
function (17.6) is bounded above by a constant.

174-3

Suppose that instead of contracting a table by halving its size when its load factor
drops below 1/4, we contract it by multiplying its size by 2/3 when its load factor
drops below 1/3. Using the potential function

®(T) = |2- T.num —T. size| ,

show that the amortized cost of a TABLE-DELETE that uses this strategy is bounded
above by a constant.
