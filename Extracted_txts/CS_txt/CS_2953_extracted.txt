Problems for Chapter 17 473

17-2, Making binary search dynamic

Binary search of a sorted array takes logarithmic search time, but the time to insert
a new element is linear in the size of the array. We can improve the time for
insertion by keeping several sorted arrays.

Specifically, suppose that we wish to support SEARCH and INSERT on a set
of n elements. Let k = [lg(n + 1)], and let the binary representation of n
be (x-1, Nk-2. -.., Mo). We have k sorted arrays Ao, Ai,.... Ax, Where for
i =0,1,...,k —1, the length of array A; is 2'. Each array is either full or empty,
depending on whether n; = 1 or n; = 0, respectively. The total number of ele-
ments held in all k arrays is therefore ye n; 2' =n. Although each individual
array is sorted, elements in different arrays bear no particular relationship to each
other.

 

a. Describe how to perform the SEARCH operation for this data structure. Analyze
its worst-case running time.

b. Describe how to perform the INSERT operation. Analyze its worst-case and
amortized running times.

c. Discuss how to implement DELETE.

17-3 Amortized weight-balanced trees

Consider an ordinary binary search tree augmented by adding to each node x the
attribute x.size giving the number of keys stored in the subtree rooted at x. Let a
be a constant in the range 1/2 < w < 1. We say that a given node x is a-balanced
if x.left.size < a-Xx.size and x.right.size < a - x.size. The tree as a whole
is «-balanced if every node in the tree is a-balanced. The following amortized
approach to maintaining weight-balanced trees was suggested by G. Varghese.

a. A 1/2-balanced tree is, in a sense, as balanced as it can be. Given a node x
in an arbitrary binary search tree, show how to rebuild the subtree rooted at x
so that it becomes 1/2-balanced. Your algorithm should run in time @(x. size),
and it can use O(x. size) auxiliary storage.

b. Show that performing a search in an n-node a-balanced binary search tree
takes O(lgm) worst-case time.

For the remainder of this problem, assume that the constant @ is strictly greater
than 1/2. Suppose that we implement INSERT and DELETE as usual for an n-node
binary search tree, except that after every such operation, if any node in the tree
is no longer @-balanced, then we “rebuild” the subtree rooted at the highest such
node in the tree so that it becomes 1/2-balanced.
