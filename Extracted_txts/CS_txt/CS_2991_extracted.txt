504

Chapter 18 B-Trees

how to implement these operations on 2-3-4 trees. We assume for convenience that
elements consist only of keys and that all key values are distinct.

a. Show how to maintain, for every node x of a 2-3-4 tree, the height of the subtree
rooted at x as an attribute x. height. Make sure that your implementation does
not affect the asymptotic running times of searching, insertion, and deletion.

b. Show how to implement the join operation. Given two 2-3-4 trees T’ and T”
and a key k, the join operation should run in O(1 + |h’ —h”|) time, where h’
and h” are the heights of T’ and T”, respectively.

c. Consider the simple path p from the root of a 2-3-4 tree T to a given key k,
the set S’ of keys in T that are less than k, and the set S” of keys in T that are
greater than k. Show that p breaks S’ into a set of trees {Tj, T..... T,,} anda
set of keys {k}.k4...., kj,}, where, fori = 1,2,..., m, we have y < ki < z
for any keys y € T/_, and z € Tj. What is the relationship between the heights
of Tj_, and T/? Describe how p breaks S” into sets of trees and keys.

 

d. Show how to implement the split operation on 7. Use the join operation to
assemble the keys in S’ into a single 2-3-4 tree T’ and the keys in S” into a
single 2-3-4 tree T”. The running time of the split operation should be O(Ig 7),
where 1 is the number of keys in T. (Hint: The costs for joining should tele-
scope.)

 

Chapter notes

Knuth [211], Aho, Hopcroft, and Ullman [5], and Sedgewick [306] give further
discussions of balanced-tree schemes and B-trees. Comer [74] provides a compre-
hensive survey of B-trees. Guibas and Sedgewick [155] discuss the relationships
among various kinds of balanced-tree schemes, including red-black trees and 2-3-4
trees.

In 1970, J. E. Hopcroft invented 2-3 trees, a precursor to B-trees and 2-3-4
trees, in which every internal node has either two or three children. Bayer and
McCreight [35] introduced B-trees in 1972; they did not explain their choice of
name.

Bender, Demaine, and Farach-Colton [40] studied how to make B-trees perform
well in the presence of memory-hierarchy effects. Their cache-oblivious algo-
rithms work efficiently without explicitly knowing the data transfer sizes within
the memory hierarchy.
