74

Chapter 3. Solving Problems by Searching

 

BREADTH-FIRST
SEARCH

BRANCHING FACTOR

Breadth-first search

One simple search strategy is a breadth-first search. In this strategy, the root node is expanded
first, then all the nodes generated by the root node are expanded next, and then their successors,
and so on. In general, all the nodes at depth d in the search tree are expanded before the nodes at
depth d+ 1, Breadth-first search can be implemented by calling the GENERAL-SEARCH algorithm
with a queuing function that puts the newly generated states at the end of the queue, after all the
previously generated states:

 

function BREADTH-FIRST-SEARCH( problem) returns a solution or failure
return GENERAL-SEARCH(problem,ENQUEUEAT-END)

 

 

 

Breadth-first search is a very systematic strategy because it considers all the paths of length 1
first, then all those of length 2, and so on. Figure 3.11 shows the progress of the search on a
simple binary tee. Ifthere is a solution, breadth-first search is guaranteed to find it, and ifthere
are several solutions, breadth-first search will always find the shallowest goal state first. In terms
of the four criteria, breadth-first search is complete, and it is optimal provided the path cost is a
nondecreasingfunction ofthe depth of the node. (This condition is usually satisfied only when
all operators have the same cost. For the general case, see the next section.)

So far, the news about breadth-first search has been good. To see why it is not always the
strategy of choice, we have to consider the amount of time and memory it takes to complete a
search. To do this, we consider a hypothetical state space where every state can be expanded to
yield b new states. We say that the branching factor of these states (and of the search tree) is b.
The root of the search tree generates b nodes at the first level, each of which generates b more
nodes, for a total of 4 at the second level. Each of these generates b more nodes, yielding b*
nodes at the third level, and so on. Now suppose that the solution for this problem has a path
length of d Then the maximum number of nodes expanded before finding a solution is

1th +h? +b) tooo te?

This is the maximum number, but the solution could be found at any point on the ath level. In
the best case, therefore, the number would be smaller.

Those who do complexity analysis get nervous (or excited, if they are the sort of people
who like a challenge) whenever they see an exponential complexity bound like O(bâ€œ). Figure 3.12
shows why. It shows the time and memory required for a breadth-first search with branching
factor b = 10 and for various values of the solution depth d. The space complexity is the same
as the time complexity, because all the leaf nodes of the tree must be maintained in memory

UN

Figure 3.11 Breadth-first search trees after 0, 1,2, and 3 node expansions.

 

 

 

 

 

 
