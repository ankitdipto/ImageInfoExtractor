Section 1,2.

The Foundations of Artificial Intelligence lL

 

ALGORITEM

INCOME
THeObea NESS

WTRACTABILITY

Mathematics (c. 800-present)

Philosophers staked out most of the important ideas of AI, but to make the leap to a formal
science required a level of mathematical formalization in three main areas: computation, logic,
and probability. The notion of expressing a computation as a formal algorithm goes back to
al-Khowarazmi, an Arab mathematician of the ninth century, whose writings also introduced
Europe to Arabic numerals and algebra.

Logic goes back at least to Aristotle, but it was a philosophical rather than mathematical
subject until George Boole (1815-1864) introduced his formal language for making logical
inference in 1847. Boole's approach was incomplete, but good enough that others filled in the
gaps. In 1879, Gottlob Frege (1848-1925) produced a logic that, except for some notational
changes, forms the first-order logic that is used today as the most basic knowledge representation
system.’ Alfred Tarski (1902-1983) introduced a theory of reference that shows how to relate
the objects in a logic to objects in the real world. The next step was to determine the limits of
what could be done with logic and computation.

David Hilbert (1862-1943), a great mathematician in his own right, is most remembered
for the problems he did not solve. In 1900, he presented a list of 23 problems that he correctly
predicted would occupy mathematicians for the bulk of the century. The final problem asks
if there is an algorithm for deciding the truth of any logical proposition involving the natural
numbers—the famous Entscheidungsproblem, or decision problem. Essentially, Hilbert was
asking if there were fundamental limits to the power of effective proofprocedures. In 1930, Kurt
Godel (1906-1978) showed that there exists an effective procedure to prove any true statement in
the first-order logic of Frege and Russell; but first-order logic could not capture the principle of
mathematical induction needed to characterize the natural numbers. In 1931,he showed that real
limits do exist. His incompleteness theorem showed that in any language expressive enough
to describe the properties of the natural numbers, there are true statements that are undecidable:
their truth cannot be established by any algorithm.

This fundamental result can also be interpreted as showing that there are some functions
on the integers that cannot be represented by an algorithm—that is, they cannot be computed.
This motivated Alan Turing (1912-1954) to try to characterize exactly which functions are
capable of being computed. This notion is actually slightly problematic, because the notion
of a computation or effective procedure really cannot be given a formal definition. However,
the Church-Turing thesis, which states that the Turing machine (Turing, 1936) is capable of
computing any computable function, is generally accepted as providing a sufficient definition.
Turing also showed that there were some functions that no Turing machine can compute. For
example, no machine can tell in general whether a given program will retum an answer on a
given input, or run forever.

Although undecidability and noncomputability are important to an understanding of com-
putation, the notion of intractability has had a much greater impact. Roughly speaking,
a class of problems is called intractable if the time required to solve instances of the class
grows at least exponentially with the size of the instances. The distinction between polynomial
and exponential growth in complexity was first emphasized in the mid-1960s (Cobham, 1964;
Edmonds, 1965). It is important because exponential growth means that even moderate-sized in-

8 To understand why Frege’s notation was not universally adopted, see the cover of this book
