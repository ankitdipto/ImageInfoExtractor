19.3 Decreasing a key and deleting a node 519

mum degree D(n) is O(lgn), which will imply that Fis-HEAP-EXTRACT-MIN
and Fis-HEAP-DELETE run in O(lgm) amortized time.

Decreasing a key

In the following pseudocode for the operation FIB-HEAP-DECREASE-KEY, we
assume as before that removing a node from a linked list does not change any of
the structural attributes in the removed node.

FiB-HEAP-DECREASE-KEY (H, x, k)
ifk > x.key
error “new key is greater than current key”
X.key = k
y=x.p
if y A NIL and x.key < y.key
Cut(H, x,y)
CASCADING-CuT(H, y)
if x.key < H.min.key
A.min = x

uT(H, x,y)
remove x from the child list of y, decrementing y.degree
add x to the root list of H
X.p = NIL
X.mark = FALSE

ASCADING-CuT(H, y)
l= yep
ifz A NIL
if y.mark == FALSE
y.mark = TRUE
else CuT(H, y,z)
CASCADING-CuT(H, z)

AURWNHE AQ BWNHQ CHYIDAUKWNHE

The FiB-HEAP-DECREASE-KEy procedure works as follows. Lines 1-3 ensure
that the new key is no greater than the current key of x and then assign the new key
to x. If x is a root or if x.key > y.key, where y is x’s parent, then no structural
changes need occur, since min-heap order has not been violated. Lines 4-5 test for
this condition.

If min-heap order has been violated, many changes may occur. We start by
cutting x in line 6. The CUT procedure “cuts” the link between x and its parent y,
making x a root.
