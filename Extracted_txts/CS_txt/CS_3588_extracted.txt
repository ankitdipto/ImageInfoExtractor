20.3 The van Emde Boas tree 555

The VEB-TREE-DELETE procedure works as follows. If the vEB tree V con-
tains only one element, then it’s just as easy to delete it as it was to insert an element
into an empty vEB tree: just set min and max to NIL. Lines 1-3 handle this case.
Otherwise, V has at least two elements. Line 4 tests whether V is a base-case VEB
tree and, if so, lines 5—8 set min and max to the one remaining element.

Lines 9-22 assume that V has two or more elements and that u > 4. In this
case, we will have to delete an element from a cluster. The element we delete from
a cluster might not be x, however, because if x equals min, then once we have
deleted x, some other element within one of V’s clusters becomes the new min,
and we have to delete that other element from its cluster. If the test in line 9 reveals
that we are in this case, then line 10 sets first-cluster to the number of the cluster
that contains the lowest element other than min, and line 11 sets x to the value of
the lowest element in that cluster. This element becomes the new min in line 12
and, because we set x to its value, it is the element that will be deleted from its
cluster.

When we reach line 13, we know that we need to delete element x from its
cluster, whether x was the value originally passed to VEB-TREE-DELETE or x
is the element becoming the new minimum. Line 13 deletes x from its cluster.
That cluster might now become empty, which line 14 tests, and if it does, then
we need to remove x’s cluster number from the summary, which line 15 handles.
After updating the summary, we might need to update max. Line 16 checks to see
whether we are deleting the maximum element in V and, if we are, then line 17 sets
summary-max to the number of the highest-numbered nonempty cluster. (The call
VEB-TREE-MAXIMUM(V. summary) works because we have already recursively
called VEB-TREE-DELETE on V. summary, and therefore V. summary. max has al-
ready been updated as necessary.) If all of V’s clusters are empty, then the only
remaining element in V is min; line 18 checks for this case, and line 19 updates
max appropriately. Otherwise, line 20 sets max to the maximum element in the
highest-numbered cluster. (If this cluster is where the element has been deleted,
we again rely on the recursive call in line 13 having already corrected that cluster’s
max attribute.)

Finally, we have to handle the case in which x’s cluster did not become empty
due to x being deleted. Although we do not have to update the summary in this
case, we might have to update max. Line 21 tests for this case, and if we have to
update max, line 22 does so (again relying on the recursive call to have corrected
max in the cluster).

Now we show that VEB-TREE-DELETE runs in O(lglgu) time in the worst
case. At first glance, you might think that recurrence (20.4) does not always apply,
because a single call of VEB-TREE-DELETE can make two recursive calls: one
on line 13 and one on line 15. Although the procedure can make both recursive
calls, let’s think about what happens when it does. In order for the recursive call on
