21.1 Disjoint-set operations 563

Yi d

 

(a)
Edge processed | Collection of disjoint sets
initial sets {a} {b} {ce} {d} fe} {ft {sg} {hy fi}
(b.d) {a} {bd} {c} {e} ft {sg} {hy fi}
(e.g) {a} {bd} {c} {eg} {ft th} fi}
(ac) {ac} {bd} {eg} {ft {hy fi}
(hi) {ac} {bd} {eg} {ft {hi} ti}
(a,b) {abcd} {eg} {ft {hi} ti}
(ef) {a,b,c.d} fe, fig} {hi} ti}
(b,c) {abcd} fe, fig} {hi} tit

(b)

Figure 21.1 (a) A graph with four connected components: {a,b,¢,d}, fe, fig}, {hi}, and {7}.
(b) The collection of disjoint sets after processing each edge.

CONNECTED-COMPONENTS(G)

1 for each vertex v € G.V

2 MAKE-SET(v)

3 for each edge (u,v) € G.E

4 if FIND-SET(u) 4 FIND-SET(v)
5 UNION(u, v)

SAME-COMPONENT(U, Vv)

1 if Finp-SET(w) == FIND-SET(v)
2 return TRUE

3 else return FALSE

The procedure CONNECTED-COMPONENTS initially places each vertex v in its
own set. Then, for each edge (u,v), it unites the sets containing u and v. By
Exercise 21.1-2, after processing all the edges, two vertices are in the same con-
nected component if and only if the corresponding objects are in the same set.
Thus, CONNECTED-COMPONENTS computes sets in such a way that the proce-
dure SAME-COMPONENT can determine whether two vertices are in the same con-
