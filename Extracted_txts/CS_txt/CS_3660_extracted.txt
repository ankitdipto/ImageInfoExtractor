614

Chapter 22. Elementary Graph Algorithms

Lemma 22.11
A directed graph G is acyclic if and only if a depth-first search of G yields no back
edges.

Proof =>: Suppose that a depth-first search produces a back edge (u,v). Then
vertex v is an ancestor of vertex u in the depth-first forest. Thus, G contains a path
from v to u, and the back edge (u,v) completes a cycle.

<=: Suppose that G contains a cycle c. We show that a depth-first search of G
yields a back edge. Let v be the first vertex to be discovered in c, and let (u,v) be
the preceding edge in c. At time v.d, the vertices of c form a path of white vertices
from v to u. By the white-path theorem, vertex u becomes a descendant of v in the
depth-first forest. Therefore, (1, v) is a back edge. .

Theorem 22.12
TOPOLOGICAL-SorRT produces a topological sort of the directed acyclic graph
provided as its input.

Proof Suppose that DFS is run on a given dag G = (V, £) to determine fin-
ishing times for its vertices. It suffices to show that for any pair of distinct ver-
tices u,v € V, if G contains an edge from u to v, then v.f < u.f. Consider any
edge (u,v) explored by DFS(G). When this edge is explored, v cannot be gray,
since then v would be an ancestor of uw and (u,v) would be a back edge, contra-
dicting Lemma 22.11. Therefore, v must be either white or black. If v is white,
it becomes a descendant of u, and so v.f < u.f. If v is black, it has already been
finished, so that v.f has already been set. Because we are still exploring from u, we
have yet to assign a timestamp to u.f, and so once we do, we will have v.f < u.f
as well. Thus, for any edge (u,v) in the dag, we have v.f < u.f, proving the
theorem. .

Exercises

224-1
Show the ordering of vertices produced by TOPOLOGICAL-SorT when it is run on
the dag of Figure 22.8, under the assumption of Exercise 22.3-2.

22.4-2

Give a linear-time algorithm that takes as input a directed acyclic graph G =
(V, E) and two vertices s and ¢, and returns the number of simple paths from s
to f in G. For example, the directed acyclic graph of Figure 22.8 contains exactly
four simple paths from vertex p to vertex v: pov, poryv, posryv, and psryv.
(Your algorithm needs only to count the simple paths, not list them.)
