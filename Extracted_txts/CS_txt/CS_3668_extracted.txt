620

Chapter 22. Elementary Graph Algorithms

in any strongly connected component other than C will be a descendant of u during
the depth-first search of G™. Thus, the vertices of the depth-first tree in GT that is
rooted at u form exactly one strongly connected component, which completes the
inductive step and the proof. .

Here is another way to look at how the second depth-first search operates. Con-
sider the component graph (G™)S°° of G™. If we map each strongly connected
component visited in the second depth-first search to a vertex of (GT)S, the sec-
ond depth-first search visits vertices of (G™)S° in the reverse of a topologically
sorted order. If we reverse the edges of (G™)S, we get the graph ((GT)S)?.
Because ((GT)SC)? = GSS (see Exercise 22.5-4), the second depth-first search
visits the vertices of GS in topologically sorted order.

Exercises

22.5-1
How can the number of strongly connected components of a graph change if a new
edge is added?

22.5-2

Show how the procedure STRONGLY-CONNECTED-COMPONENTS works on the
graph of Figure 22.6. Specifically, show the finishing times computed in line 1 and
the forest produced in line 3. Assume that the loop of lines 5—7 of DFS considers
vertices in alphabetical order and that the adjacency lists are in alphabetical order.

22.5-3

Professor Bacon claims that the algorithm for strongly connected components
would be simpler if it used the original (instead of the transpose) graph in the
second depth-first search and scanned the vertices in order of increasing finishing
times. Does this simpler algorithm always produce correct results?

22.5-4
Prove that for any directed graph G, we have ((G™)S°°)? = GSCC_ That is, the
transpose of the component graph of G7 is the same as the component graph of G.

22.5-5

Give an O(V + E)-time algorithm to compute the component graph of a directed
graph G = (V, E). Make sure that there is at most one edge between two vertices
in the component graph your algorithm produces.
