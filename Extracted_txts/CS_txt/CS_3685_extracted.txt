634

Chapter 23 Minimum Spanning Trees

Prim’s algorithm

Like Kruskal’s algorithm, Prim’s algorithm is a special case of the generic min-
imum-spanning-tree method from Section 23.1. Prim’s algorithm operates much
like Dijkstra’s algorithm for finding shortest paths in a graph, which we shall see in
Section 24.3. Prim’s algorithm has the property that the edges in the set A always
form a single tree. As Figure 23.5 shows, the tree starts from an arbitrary root
vertex 7 and grows until the tree spans all the vertices in V. Each step adds to the
tree A a light edge that connects A to an isolated vertex—one on which no edge
of A is incident. By Corollary 23.2, this rule adds only edges that are safe for A;
therefore, when the algorithm terminates, the edges in A form a minimum spanning
tree. This strategy qualifies as greedy since at each step it adds to the tree an edge
that contributes the minimum amount possible to the tree’s weight.

In order to implement Prim’s algorithm efficiently, we need a fast way to select
a new edge to add to the tree formed by the edges in A. In the pseudocode below,
the connected graph G and the root r of the minimum spanning tree to be grown
are inputs to the algorithm. During execution of the algorithm, all vertices that
are not in the tree reside in a min-priority queue Q based on a key attribute. For
each vertex v, the attribute v. key is the minimum weight of any edge connecting v
to a vertex in the tree; by convention, v.key = oo if there is no such edge. The
attribute v.72 names the parent of v in the tree. The algorithm implicitly maintains
the set A from GENERIC-MST as

Az={(v,v.m):vEV-{ry-Q}.

When the algorithm terminates, the min-priority queue Q is empty; the minimum
spanning tree A for G is thus

A={(v,v.m):vEV—{r}.

MST-PRIM(G, w,r')
1 for eachu €G.V

2 u.key = 00

3 uc = NIL

4 rkey=0

5 QO=GV

6 whileQ 49%

7 u = EXTRACT-MIN(Q)

8 for each v € G.Adj[u]

9 ifv € QO and w(u,v) < v.key
0 var=u

1 v.key = w(u,v)

1
1
