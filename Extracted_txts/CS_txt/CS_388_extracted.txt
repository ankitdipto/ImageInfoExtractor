956

Chapter 31 Number-Theoretic Algorithms

Theorem 31.34
If p is an odd prime and e > 1, then the equation

x? =1 (mod p*) (31.34)

has only two solutions, namely x = 1 and x = —1.

Proof Equation (31.34) is equivalent to

P| e-De&+).

Since p > 2, we can have p | (x — 1) or p | (x + 1), but not both. (Otherwise,
by property (31.3), p would also divide their difference (x + 1) — (x — 1) = 2.)
If p + (x—1), then ged(p®, x — 1) = 1, and by Corollary 31.5, we would have
pe | (x +1). That is, x = —1 (mod p*%). Symmetrically, if p + (x + 1),
then ged(p®,x + 1) = 1, and Corollary 31.5 implies that p* | (x — 1), so that
x =1 (mod p*). Therefore, either x =—1 (mod p*) or x =1 (mod p*).

Anumber x is a nontrivial square root of 1, modulo n, if it satisfies the equation
x? = 1 (mod 7) but x is equivalent to neither of the two “trivial” square roots:
1 or —1, modulo n. For example, 6 is a nontrivial square root of 1, modulo 35.
We shall use the following corollary to Theorem 31.34 in the correctness proof in
Section 31.8 for the Miller-Rabin primality-testing procedure.

Corollary 31.35
If there exists a nontrivial square root of 1, modulo 7, then n is composite.

Proof By the contrapositive of Theorem 31.34, if there exists a nontrivial square
root of 1, modulo 7, then n cannot be an odd prime or a power of an odd prime.
If x? = 1 (mod 2), then x = 1 (mod 2), and so all square roots of 1, modulo 2,
are trivial. Thus, 7 cannot be prime. Finally, we must have n > 1 for a nontrivial
square root of | to exist. Therefore, 1 must be composite. .

Raising to powers with repeated squaring

A frequently occurring operation in number-theoretic computations is raising one
number to a power modulo another number, also known as modular exponentia-
tion. More precisely, we would like an efficient way to compute a? mod n, where
a and b are nonnegative integers and n is a positive integer. Modular exponenti-
ation is an essential operation in many primality-testing routines and in the RSA
public-key cryptosystem. The method of repeated squaring solves this problem
efficiently using the binary representation of b.

Let (be. byt. +++ b,, bo) be the binary representation of b. (That is, the binary
representation is k + 1 bits long, by is the most significant bit, and bg is the least
