976

Chapter 31 Number-Theoretic Algorithms

Pollard’s rho heuristic

Trial division by all integers up to R is guaranteed to factor completely any number
up to R?. For the same amount of work, the following procedure, POLLARD-RHO,
factors any number up to R* (unless we are unlucky). Since the procedure is only
a heuristic, neither its running time nor its success is guaranteed, although the
procedure is highly effective in practice. Another advantage of the POLLARD-
RHO procedure is that it uses only a constant number of memory locations. (If you
wanted to, you could easily implement POLLARD-RHO on a programmable pocket
calculator to find factors of small numbers.)

POLLARD-RHO(n)

1i=l

2 x, = RANDOM(0,n — 1)
3 y=m

4 k=2

5 while TRUE

6 i=i¢+l

7 x; = (x?_,— 1) modn
8 d = ged(y —x;,n)
9 ifd Alandd An
10 print d

11 ifi ==k

12 y=HXi

13 k = 2k

The procedure works as follows. Lines 1-2 initialize i to 1 and x, to a randomly
chosen value in Z,. The while loop beginning on line 5 iterates forever, searching
for factors of n. During each iteration of the while loop, line 7 uses the recurrence

x; = (x?_,—1) modn (31.43)
to produce the next value of x; in the infinite sequence
X1,X2,X3,X4,.-. 5 (31.44)

with line 6 correspondingly incrementing i. The pseudocode is written using sub-
scripted variables x; for clarity, but the program works the same if all of the sub-
scripts are dropped, since only the most recent value of x; needs to be maintained.
With this modification, the procedure uses only a constant number of memory lo-
cations.

Every so often, the program saves the most recently generated x; value in the
variable y. Specifically, the values that are saved are the ones whose subscripts are
powers of 2:
