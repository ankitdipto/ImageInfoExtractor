32.2. The Rabin-Karp algorithm 991

To compute the remaining values f, f2,..., tn—-m in time O(n — m), we observe
that we can compute f,+, from fs in constant time, since
tsa, = 10(t, —10"-'T[s + 1]) + T[s +m4 1]. (32.1)

Subtracting 10”! 7'[s + 1] removes the high-order digit from ¢,, multiplying the
result by 10 shifts the number left by one digit position, and adding T[s + m + 1]
brings in the appropriate low-order digit. For example, ifm = 5 and t; = 31415,
then we wish to remove the high-order digit T[s + 1] = 3 and bring in the new
low-order digit (suppose it is T[s + 5 + 1] = 2) to obtain

ts41 = 10(31415 — 10000 - 3) +2
14152.

If we precompute the constant 10’~! (which we can do in time O(Igm) using the
techniques of Section 31.6, although for this application a straightforward O(m)-
time method suffices), then each execution of equation (32.1) takes a constant num-
ber of arithmetic operations. Thus, we can compute p in time @(m), and we can
compute all of fo. f)..... t,—-m in time O(n —m + 1). Therefore, we can find all
occurrences of the pattern P[1..m] in the text T[1..] with @(m) preprocessing
time and @(n —m + 1) matching time.

Until now, we have intentionally overlooked one problem: p and f; may be
too large to work with conveniently. If P contains m characters, then we cannot
reasonably assume that each arithmetic operation on p (which is m digits long)
takes “constant time.” Fortunately, we can solve this problem easily, as Figure 32.5
shows: compute p and the f, values modulo a suitable modulus g. We can compute
p modulo g in @(m) time and all the t, values modulo g in ©(n — m + 1) time.
If we choose the modulus q as a prime such that 10g just fits within one computer
word, then we can perform all the necessary computations with single-precision
arithmetic. In general, with a d-ary alphabet {0,1,..., d —1}, we choose g so
that dq fits within a computer word and adjust the recurrence equation (32.1) to
work modulo g, so that it becomes

tear = (d(t; —T[s + 1]h) + T[y +m + 1]) mod g, (32.2)

where h = d”~! (mod q) is the value of the digit “1” in the high-order position
of an m-digit text window.

The solution of working modulo gq is not perfect, however: t; = p (mod q)
does not imply that t, = p. On the other hand, if 4; # p (mod q), then we
definitely have that tf, # p, so that shift s is invalid. We can thus use the test
ts = p (mod q) asa fast heuristic test to rule out invalid shifts s. Any shift s for
which t; = p (mod q) must be tested further to see whether s is really valid or
we just have a spurious hit. This additional test explicitly checks the condition
