SECTION 1-4 Map Simplification 17

 

(With NAND gates (©) With NOR gates
Figure 1-13 Logic diagrams with NAND or NOR gates.

‘When choosing adjacent squares for the function in the map, the X’s may
be assumed to be either 0 or 1, whichever gives the simplest expression. In
addition, an x need not be used at all if it does not contribute to the simplif

cation of the function In each case, the choice depends only on the simplifi-
cation that can be achieved. As an example, consider the following Boolean
function together with the dor’t-care minterms:

F(A, B, C) = & (0,2,6)
(A, B,C) = & (1,3,5)

‘The minterms listed with F produce a 1 for the function. The don’t-care min-
terms listed with dmay produce either a0 ora 1 for the function. The remaining
minterms, 4and7, produce a 0 for the function. The map is shown in Fig. 1-14.
The minterms of F are marked with 1's, those of d are marked with x’s, and
the remaining squares are marked with 0's. The 1’s and x's are combined in
any convenient manner so as to enclose the maximum number of adjacent
squares. It is not necessary to include all or any of the x’s, but all the I’s must
be included. By including the don’t-care minterms 1 and 3 with the 1's in the
first row we obtain the term A’. The remaining 1 for minterm 6 is combined
with minterm 2 to obtain the term BC’. The simplified expression is

FeA'+ BC
Note that don’t-care minterm 5 was not included because it does not contribute
to the simplification of the expression. Note also that if don’t-care minterms
1 and 3 were not included with the 1's, the simplified expression for F would
have been

F = A'C' + BC’

This would require two AND gates and an OR gate, as compared to the ex-
pression obtained previously, which requires only one AND and one OR gate.
