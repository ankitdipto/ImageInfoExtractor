33.4 Finding the closest pair of points 1039

q

(a) (b)

Figure 33.10 The definition of a star-shaped poly gon, for use in Exercise 33.3-4, (a) A star-shaped
polygon. The segment from point p to any point q on the boundary intersects the boundary only at q.
(b) A non-star-shaped polygon. The shaded region on the left is the shadow of q, and the shaded
region on the right is the shadow of q’. Since these regions are disjoint, the kernel is empty.

star-shaped polygon P specified by its vertices in counterclockwise order, show
how to compute CH(P) in O(n) time.

33.3-5

In the on-line convex-hull problem, we are given the set Q of n points one point at
atime. After receiving each point, we compute the convex hull of the points seen
so far. Obviously, we could run Graham’s scan once for each point, with a total
running time of O(n? 1g). Show how to solve the on-line convex-hull problem in
a total of O(n?) time.

33.3-6
Show how to implement the incremental method for computing the convex hull
of n points so that it runs in O(n lg) time.

 

33.4 Finding the closest pair of points

We now consider the problem of finding the closest pair of points in a set QO of
n > 2 points. “Closest” refers to the usual euclidean distance: the distance between
points py = (x1, 1) and pz = (Xo, Yo) is (1 — X2)? + (M1 — Ya). Two points
in set O may be coincident, in which case the distance between them is zero. This
problem has applications in, for example, traffic-control systems. A system for
controlling air or sea traffic might need to identify the two closest vehicles in order
to detect potential collisions.

A brute-force closest-pair algorithm simply looks at all the (3) = O(n?) pairs
of points. In this section, we shall describe a divide-and-conquer algorithm for
