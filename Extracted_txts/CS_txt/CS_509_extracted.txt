1054

Chapter 34 NP-Completeness

Second, for many reasonable models of computation, a problem that can be
solved in polynomial time in one model can be solved in polynomial time in an-
other. For example, the class of problems solvable in polynomial time by the serial
random-access machine used throughout most of this book is the same as the class
of problems solvable in polynomial time on abstract Turing machines.' It is also
the same as the class of problems solvable in polynomial time on a parallel com-
puter when the number of processors grows polynomially with the input size.

Third, the class of polynomial-time solvable problems has nice closure proper-
ties, since polynomials are closed under addition, multiplication, and composition.
For example, if the output of one polynomial-time algorithm is fed into the input of
another, the composite algorithm is polynomial. Exercise 34.1-5 asks you to show
that if an algorithm makes a constant number of calls to polynomial-time subrou-
tines and performs an additional amount of work that also takes polynomial time,
then the running time of the composite algorithm is polynomial.

Abstract problems

To understand the class of polynomial-time solvable problems, we must first have
a formal notion of what a “problem” is. We define an abstract problem Q to be a
binary relation on a set J of problem instances and a set S of problem solutions.
For example, an instance for SHORTEST-PATH is a triple consisting of a graph
and two vertices. A solution is a sequence of vertices in the graph, with perhaps
the empty sequence denoting that no path exists. The problem SHORTEST-PATH
itself is the relation that associates each instance of a graph and two vertices with
a shortest path in the graph that connects the two vertices. Since shortest paths are
not necessarily unique, a given problem instance may have more than one solution.

This formulation of an abstract problem is more general than we need for our
purposes. As we saw above, the theory of NP-completeness restricts attention to
decision problems: those having a yes/no solution. In this case, we can view an
abstract decision problem as a function that maps the instance set J to the solution
set {0,1}. For example, a decision problem related to SHORTEST-PATH is the
problem PATH that we saw earlier. If i = (G, u,v, k) is an instance of the decision
problem PATH, then PATH(i) = 1 (yes) if a shortest path from wu to v has at
most k edges, and PATH(i) = 0 (no) otherwise. Many abstract problems are not
decision problems, but rather optimization problems, which require some value to
be minimized or maximized. As we saw above, however, we can usually recast an
optimization problem as a decision problem that is no harder.

 

‘See Hopcroft and Ullman [180] or Lewis and Papadimitriou [236] for a thorough treatment of the
Turing-machine model.
