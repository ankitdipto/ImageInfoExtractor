35.3 The set-covering problem 1117

35.2-3

Consider the following closest-point heuristic for building an approximate trav-
eling-salesman tour whose cost function satisfies the triangle inequality. Begin
with a trivial cycle consisting of a single arbitrarily chosen vertex. At each step,
identify the vertex u that is not on the cycle but whose distance to any vertex on the
cycle is minimum. Suppose that the vertex on the cycle that is nearest u is vertex v.
Extend the cycle to include u by inserting u just after v. Repeat until all vertices
are on the cycle. Prove that this heuristic returns a tour whose total cost is not more
than twice the cost of an optimal tour.

35.2-4

In the bottleneck traveling-salesman problem, we wish to find the hamiltonian cy-
cle that minimizes the cost of the most costly edge in the cycle. Assuming that the
cost function satisfies the triangle inequality, show that there exists a polynomial-
time approximation algorithm with approximation ratio 3 for this problem. (Hint:
Show recursively that we can visit all the nodes in a bottleneck spanning tree, as
discussed in Problem 23-3, exactly once by taking a full walk of the tree and skip-
ping nodes, but without skipping more than two consecutive intermediate nodes.
Show that the costliest edge in a bottleneck spanning tree has a cost that is at most
the cost of the costliest edge in a bottleneck hamiltonian cycle.)

35.2-5

Suppose that the vertices for an instance of the traveling-salesman problem are
points in the plane and that the cost c(u,v) is the euclidean distance between
points uw and v. Show that an optimal tour never crosses itself.

 

35.3. The set-covering problem

The set-covering problem is an optimization problem that models many problems
that require resources to be allocated. Its corresponding decision problem general-
izes the NP-complete vertex-cover problem and is therefore also NP-hard. The ap-
proximation algorithm developed to handle the vertex-cover problem doesnâ€™t apply
here, however, and so we need to try other approaches. We shall examine a simple
greedy heuristic with a logarithmic approximation ratio. That is, as the size of the
instance gets larger, the size of the approximate solution may grow, relative to the
size of an optimal solution. Because the logarithm function grows rather slowly,
however, this approximation algorithm may nonetheless give useful results.
