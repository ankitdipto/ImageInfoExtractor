Problems for Chapter 35 1135

a. Prove that the size of the maximum clique in G™ is equal to the kth power of
the size of the maximum clique in G.

b. Argue that if there is an approximation algorithm that has a constant approxi-
mation ratio for finding a maximum-size clique, then there is a polynomial-time
approximation scheme for the problem.

35-3 Weighted set-covering problem

Suppose that we generalize the set-covering problem so that each set S; in the
family ¥ has an associated weight w; and the weight of a cover © is Ys, ee Wi.
We wish to determine a minimum-weight cover. (Section 35.3 handles the case in
which w; = | for all i.)

Show how to generalize the greedy set-covering heuristic in a natural manner
to provide an approximate solution for any instance of the weighted set-covering
problem. Show that your heuristic has an approximation ratio of H(d), where d is
the maximum size of any set S;.

35-4 Maximum matching

Recall that for an undirected graph G, a matching is a set of edges such that no
two edges in the set are incident on the same vertex. In Section 26.3, we saw how
to find a maximum matching in a bipartite graph. In this problem, we will look at
matchings in undirected graphs in general (i.e., the graphs are not required to be
bipartite).

a. A maximal matching is a matching that is not a proper subset of any other
matching. Show that a maximal matching need not be a maximum matching by
exhibiting an undirected graph G and a maximal matching M in G that is not a
maximum matching. (Hint: You can find such a graph with only four vertices.)

b. Consider an undirected graph G = (V, E). Give an O(E£)-time greedy algo-
rithm to find a maximal matching in G.

In this problem, we shall concentrate on a polynomial-time approximation algo-
rithm for maximum matching. Whereas the fastest known algorithm for maximum
matching takes superlinear (but polynomial) time, the approximation algorithm
here will run in linear time. You will show that the linear-time greedy algorithm
for maximal matching in part (b) is a 2-approximation algorithm for maximum
matching.

c. Show that the size of a maximum matching in G is a lower bound on the size
of any vertex cover for G.
