1138

Chapter 35 Approximation Algorithms

each item. If we take a fraction x; of item i, where 0 < x; < 1, we contribute
x; w; to the weight of the knapsack and receive value x;v;. Our goal is to develop
a polynomial-time 2-approximation algorithm for the 0-1 knapsack problem.

In order to design a polynomial-time algorithm, we consider restricted instances
of the 0-1 knapsack problem. Given an instance J of the knapsack problem, we
form restricted instances J;, for j = 1,2..... n, by removing items 1,2,..., j-l
and requiring the solution to include item j (all of item j in both the fractional
and 0-1 knapsack problems). No items are removed in instance /;. For instance /;,
let P; denote an optimal solution to the 0-1 problem and Q; denote an optimal
solution to the fractional problem.

a. Argue that an optimal solution to instance J of the 0-1 knapsack problem is one
of {P1, P2...., Pry}.

b. Prove that we can find an optimal solution Q; to the fractional problem for in-
stance J; by including item j and then using the greedy algorithm in which
at each step, we take as much as possible of the unchosen item in the set
{@tljt2...., n} with maximum value per pound v;/w;.

c. Prove that we can always construct an optimal solution Q; to the fractional
problem for instance /; that includes at most one item fractionally. That is, for
all items except possibly one, we either include all of the item or none of the
item in the knapsack.

d. Given an optimal solution Q; to the fractional problem for instance J;, form
solution R; from Q; by deleting any fractional items from Q ;. Let v(S) denote
the total value of items taken ina solution S. Prove that v(Rj) > v(Qj)/2 =
v(P;)/2.

e. Give a polynomial-time algorithm that returns a maximum-value solution from
the set {R,, Ro,.... R,,}, and prove that your algorithm is a polynomial-time
2-approximation algorithm for the 0-1 knapsack problem.

 

Chapter notes

Although methods that do not necessarily compute exact solutions have been
known for thousands of years (for example, methods to approximate the value
of zr), the notion of an approximation algorithm is much more recent. Hochbaum
[172] credits Garey, Graham, and Ullman [128] and Johnson [190] with formal-
izing the concept of a polynomial-time approximation algorithm. The first such
algorithm is often credited to Graham [149].
