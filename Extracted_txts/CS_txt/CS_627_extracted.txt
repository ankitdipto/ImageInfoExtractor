Chapter 1: Getting Started 11

 

Types of C Variables

As we saw earlier, an entity that may vary during program
execution is called a variable. Variable names are names given to
locations in memory. These locations can contain integer, real or
character constants. In any language, the types of variables that it
can support depend on the types of constants that it can handle.
This is because a particular type of variable can hold only the same
type of constant. For example, an integer variable can hold only an
integer constant, a real variable can hold only a real constant and a
character variable can hold only a character constant.

The rules for constructing different types of constants are different.
However, for constructing variable names of all types the same set
of rules apply. These rules are given below.

Rules for Constructing Variable Names

(a) A variable name is any combination of 1 to 31 alphabets,
digits or underscores. Some compilers allow variable names
whose length could be up to 247 characters. Still, it would be
safer to stick to the rule of 31 characters. Do not create
unnecessarily long variable names as it adds to your typing
effort.

(b) The first character in the variable name must be an alphabet or
underscore.

(c) No commas or blanks are allowed within a variable name.

(d) No special symbol other than an underscore (as in gross_sal)
can be used in a variable name.

Ex.: si_int
m_hra
pop_e_89

These rules remain same for all the types of primary and secondary
variables. Naturally, the question follows... how is C able to
differentiate between these variables? This is a rather simple
