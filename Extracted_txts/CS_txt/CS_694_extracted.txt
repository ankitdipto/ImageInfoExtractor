66 Let Us C

 

if (per >= 60)
printf ( “First division’ ) ;

if (( per >= 50) && ( per < 60) )
printf ( “Second division" ) ;
if (( per >= 40) && ( per < 50) )
printf ( “Third division” ) ;

if (per < 40)
printf ( "Fail" ) ;

As can be seen from the second if statement, the && operator is
used to combine two conditions. ‘Second division’ gets printed if
both the conditions evaluate to true. If one of the conditions
evaluate to false then the whole thing is treated as false.

Two distinct advantages can be cited in favour of this program:

 

(a) The matching (or do I say mismatching) of the ifs with their
corresponding elses gets avoided, since there are no elses in
this program.

(b) In spite of using several conditions, the program doesn't creep
to the right. In the previous program the statements went on
creeping to the right. This effect becomes more pronounced as
the number of conditions go on increasing. This would make
the task of matching the ifs with their corresponding elses and
matching of opening and closing braces that much more
difficult.

 

The else if Clause

There is one more way in which we can write program for
Example 2.4. This involves usage of else if blocks as shown
below:
