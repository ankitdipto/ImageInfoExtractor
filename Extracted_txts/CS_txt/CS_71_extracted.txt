126 — cunrter rive Basic Computer Organization and Design

‘accumulator (AC)

immediate
instruction

ffective address

Computers that have a single-processor register usually assign to it the name
accumulator and label it AC. The operation is performed with the memory
operand and the content of AC.

If an operation in an instruction code does not need an operand from
memory, the rest of the bits in the instruction can be used for other purposes.
Forexample, operations such asclear AC, complement AC, and increment AC
operate on data stored in the AC register. They do not need an operand from
‘memory. For these types of operations, the second part of the instruction code
(bits 0 through 11) is not needed for specifying a memory address and can be
used to specify other operations for the computer.

Indirect Address

It is sometimes convenient to use the address bits of an instruction code not
as an address but as the actual operand. When thesecond part of an instruction
code specifies an operand, the instruction is said to have an immediate
operand. When the second part specifies the address of an operand, the
instruction is said to have a direct address. This is in contrast to a third
possibility called indirect address, where the bits in the second part of the
instruction designate an address of a memory word in which the address of
the operandis found. One bit of the instruction code can be used to distinguish
between a direct and an indirect address.

‘As an illustration of this configuration, consider the instruction code
format shown in Fig. 5-2(a). It consists of a 3-bit operation code, a 12-bit
address, and an indirect address mode bit designated by I. The mode bit is 0
for a direct address and 1 for an indirect address. A direct address instruction
is shown in Fig. 5-2(b). It is placed in address 22 in memory. The I bit is 0, so
theinstruction is recognized as a direct address instruction. The opcode speci-
fies an ADD instruction, and the address part is the binary equivalent of 457.
The control finds the operand in memory at address 457 and adds it to the
content of AC. The instruction in address 35 shown in Fig. 5-2(c) has a mode
bit I = 1 Therefore, it is recognized as an indirect address instruction. The
address part is the binary equivalent of 300. The control goes to address 300
tofind the address of the operand. The address of the operand in this case is
1350. The operand found in address 1350 is then added to the content of AC.
The indirect address instruction needs two references to memory to fetch an
operand. The first reference is needed to read the address of the operand; the
second is for the operand itself. We define the effective address to be the address
of the operand in a computation-type instruction or the target address in a
branch-type instruction. Thus the effective address in the instruction of Fig.
5-2(b) is 457 and in the instruction of Fig 5-2(c) is 1350.

The direct and indirect addressing modes are used in the computer
presented in this chapter. The memory word that holds the address of the
operand in an indirect address instruction is used as a pointer to an array of
