158 Let Us C

 

so many things. Man is an intelligent species, but still

cannot perform all of life’s tasks all alone. He has to rely
on others. You may call a mechanic to fix up your bike, hire a
gardener to mow your lawn, or rely on a store to supply you
groceries every month. A computer program (except for the
simplest one) finds itself in a similar situation. It cannot handle all
the tasks by itself. Instead, it requests other program like
entities—called ‘functions’ in C—to get its tasks done. In this
chapter we will study these functions. We will look at a variety of
features of these functions, starting with the simplest one and then
working towards those that demonstrate the power of C functions.

I nowingly or unknowingly we rely on so many persons for

What is a Function

A function is a self-contained block of statements that perform a
coherent task of some kind. Every C program can be thought of as
a collection of these functions. As we noted earlier, using a
function is something like hiring a person to do a specific job for
you. Sometimes the interaction with this person is very simple;
sometimes it’s complex.

Suppose you have a task that is always performed exactly in the
same way—say a bimonthly servicing of your motorbike. When
you want it to be done, you go to the service station and say, “It’s
time, do it now”. You don’t need to give instructions, because the
mechanic knows his job. You don’t need to be told when the job is
done. You assume the bike would be serviced in the usual way, the
mechanic does it and that’s that.

Let us now look at a simple C function that operates in much the
same way as the mechanic. Actually, we will be looking at two
things—a function that calls or activates the function and the
function itself.
