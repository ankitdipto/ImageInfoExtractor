178 Let Us C

 

Here, the gospel() function has been defined to return void; means
it would return nothing. Therefore, it would just flash the four
messages about viruses and return the control back to the main()
function.

Call by Value and Call by Reference

By now we are well familiar with how to call functions. But, if you
observe carefully, whenever we called a function and passed
something to it we have always passed the ‘values’ of variables to
the called function. Such function calls are called ‘calls by value’.
By this what we mean is, on calling a function we are passing
values of variables to it. The examples of call by value are shown
below:

sum = calsum (a, b,c) ;
f =factr (a);

We have also learnt that variables are stored somewhere in
memory. So instead of passing the value of a variable, can we not
pass the location number (also called address) of the variable to a
function? If we were able to do so it would become a ‘call by
reference’. What purpose a ‘call by reference’ serves we would
find out a little later. First we must equip ourselves with
knowledge of how to make a ‘call by reference’. This feature of C
functions needs at least an elementary knowledge of a concept
called ‘pointers’. So let us first acquire the basics of pointers after
which we would take up this topic once again.

An Introduction to Pointers

Which feature of C do beginners find most difficult to understand?
The answer is easy: pointers. Other languages have pointers but
few use them so frequently as C does. And why not? It is C’s
clever use of pointers that makes it the excellent language it is.
