26.1 Flow networks 709

finding a maximum matching in an undirected bipartite graph, appears in Sec-
tion 26.3. Section 26.4 presents the push-relabel method, which underlies many of
the fastest algorithms for network-flow problems. Section 26.5 covers the “relabel-
to-front” algorithm, a particular implementation of the push-relabel method that
runs in time O(V*). Although this algorithm is not the fastest algorithm known,
it illustrates some of the techniques used in the asymptotically fastest algorithms,
and it is reasonably efficient in practice.

 

26.1 Flow networks

In this section, we give a graph-theoretic definition of flow networks, discuss their
properties, and define the maximum-flow problem precisely. We also introduce
some helpful notation.

Flow networks and flows

A flow network G = (V,E) is a directed graph in which each edge (u,v) € E
has a nonnegative capacity c(u,v) > 0. We further require that if E contains an
edge (u,v), then there is no edge (v,w) in the reverse direction. (We shall see
shortly how to work around this restriction.) If (u,v) ¢ E, then for convenience
we define c(u,v) = 0, and we disallow self-loops. We distinguish two vertices
ina flow network: a source s and a sink t. For convenience, we assume that each
vertex lies on some path from the source to the sink. That is, for each vertex v € V,
the flow network contains a path s ~+ v ~+ t. The graph is therefore connected
and, since each vertex other than s has at least one entering edge, |E| > |V| —1.
Figure 26.1 shows an example of a flow network.

We are now ready to define flows more formally. Let G = (V, E) be a flow
network with a capacity function c. Let s be the source of the network, and let ¢ be
the sink. A flow in G is a real-valued function f : V x V — R that satisfies the
following two properties:

Capacity constraint: For all u,v € V, we require 0 < f(u,v) < c(u.v).
Flow conservation: For all u ¢ V — {s,t}, we require

fo. = Vi sur).

vev vev

When (u,v) ¢ E, there can be no flow from u to v, and f(u,v) = 0.
